{
  "projects": [
    {
      "project_name": "Gathered Data",
      "project_description": "Collection of random data may be needed",
      "created_at": "9/8/2022",
      "due_to": "2023-01-01",
      "updated_at": null,
      "id": 1
    },
    {
      "project_name": "Laravel and Nuxt",
      "project_description": "installation and configuration",
      "created_at": "9/9/2022",
      "due_to": "2022-12-01",
      "updated_at": null,
      "id": 2
    },
    {
      "project_name": "Flutter",
      "project_description": "First Flutter tutorial and installation",
      "created_at": "9/9/2022",
      "due_to": "2022-09-25",
      "updated_at": null,
      "id": 3
    },
    {
      "project_name": "Vue 3 ",
      "project_description": "tips, hints and packages",
      "created_at": "9/13/2022",
      "due_to": "2023-12-31",
      "updated_at": null,
      "id": 4
    },
    {
      "project_name": "Laravels",
      "project_description": "Laravel",
      "created_at": "10/10/2022",
      "due_to": "2023-01-01",
      "updated_at": null,
      "id": 5
    },
    {
      "project_name": "Nuxt and prisma",
      "project_description": "Nuxt and prisma",
      "created_at": "10/23/2022",
      "due_to": "2022-10-29",
      "updated_at": null,
      "id": 6
    },
    {
      "project_name": "Devel",
      "project_description": "Sample Project",
      "created_at": "11/15/2022",
      "due_to": "2022-12-01",
      "updated_at": null,
      "id": 7
    }
  ],
  "todos": [
    {
      "id": 1,
      "projectId": 1,
      "todo": [
        {
          "name": "Laravels",
          "data": [
            "<p style=\"text-align: center;\"><strong><span style=\"color: #ffffff; background-color: #e03e2d; font-size: 18pt;\">Laravel Documentation</span></strong></p>\n<p>Routes:&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/user', [UserController::class, 'index']);</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>Route::match(['get', 'post'], '/', function () {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::any('/', function () {</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>php artisan route:list</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>php artisan route:list -v&nbsp; //with middleware</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/posts/{post}/comments/{comment}', function ($postId, $commentId) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/user/{name?}', // optional parameter</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/user/{name}', function ($name) {</p>\n<p>&nbsp; <span style=\"white-space: pre;\"> </span>&nbsp; //</p>\n<p><span style=\"white-space: pre;\"> </span>})-&gt;where('name', '[A-Za-z]+');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/user/{name}', function ($name) {</p>\n<p>&nbsp; &nbsp;<span style=\"white-space: pre;\"> </span> //</p>\n<p><span style=\"white-space: pre;\"> </span>})-&gt;whereAlphaNumeric('name');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>in: App\\Providers\\RouteServiceProvider ///add pattern for all routes</p>\n<p><span style=\"white-space: pre;\"> </span>public function boot()</p>\n<p><span style=\"white-space: pre;\"> </span>{</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>Route::pattern('id', '[0-9]+');</p>\n<p><span style=\"white-space: pre;\"> </span>}</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect()-&gt;route('profile');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$url = route('profile', ['id' =&gt; 1]);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>{</p>\n<p><span style=\"white-space: pre;\"> </span>use App\\Models\\Post;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/posts/{post:slug}', function (Post $post) {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>return $post; //search in post using slug not id</p>\n<p><span style=\"white-space: pre;\"> </span>});</p>\n<p><span style=\"white-space: pre;\"> </span>}</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>{</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/locations/{location:slug}', [LocationsController::class, 'show'])</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; -&gt;name('locations.view')</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; -&gt;missing(function (Request $request) {</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return Redirect::route('locations.index');</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; });</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>}</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>MiddleWare::</p>\n<p><span style=\"white-space: pre;\"> </span>Route::get('/', function () {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>//</p>\n<p><span style=\"white-space: pre;\"> </span>})-&gt;middleware(['first', 'second']);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>-------------------------------</p>\n<p><span style=\"white-space: pre;\"> </span>Route::middleware([EnsureTokenIsValid::class])-&gt;group(function () {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>Route::get('/', function () {</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; //</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>});</p>\n<p>&nbsp;</p>\n<p>&nbsp; &nbsp;<span style=\"white-space: pre;\"> </span> Route::get('/profile', function () {</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; //</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>})-&gt;withoutMiddleware([EnsureTokenIsValid::class]);</p>\n<p><span style=\"white-space: pre;\"> </span>});</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>----------------------------</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>Route::resource('photos', PhotoController::class)-&gt;only([</p>\n<p>&nbsp; &nbsp; 'index', 'show'</p>\n<p><span style=\"white-space: pre;\"> </span>]);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>Route::resource('photos', PhotoController::class)-&gt;except([</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'create', 'store', 'update', 'destroy'</p>\n<p><span style=\"white-space: pre;\"> </span>]);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>----------------------------------</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p>Requests:</p>\n<p><span style=\"white-space: pre;\"> </span> $name = $request-&gt;input('name');</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>$uri = $request-&gt;path();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;is('admin/*')) {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>//</p>\n<p><span style=\"white-space: pre;\"> </span>}</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$url = $request-&gt;url();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$urlWithQueryString = $request-&gt;fullUrl();<span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;fullUrlWithQuery(['type' =&gt; 'phone']);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$method = $request-&gt;method();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;isMethod('post')) {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>//</p>\n<p><span style=\"white-space: pre;\"> </span>}</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>$ipAddress = $request-&gt;ip();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;expectsJson()) {</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>--------------------------------------------------------------</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;all();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;input();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;collect();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;input('name');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;input('name', 'Sally'); //if name is empty, default is saly</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;query('name'); //query url string</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;query('name', 'Helen'); // with default if emtpy name</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$query = $request-&gt;query(); // all query strings</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>:::::::::::::::::: if json, use .</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;input('user.name');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$name = $request-&gt;name;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>::::::::::::::::::::;;filtring request:</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;only(['username', 'password']);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;only('username', 'password');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;except(['credit_card']);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$input = $request-&gt;except('credit_card');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>:::::::::::::::::::::::::::::::::::::::::::::::::::::</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;has('name')) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;has(['name', 'email']))</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;hasAny(['name', 'email'])) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;flash(); // will hold the request to the next reqeust, and be acces<span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;flashOnly('name');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;flashExcept('password');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect('form')-&gt;withInput();</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>-------------------------------------</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect('form')-&gt;withInput(</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>$request-&gt;except('password')</p>\n<p><span style=\"white-space: pre;\"> </span>);</p>\n<p><span style=\"white-space: pre;\"> </span>-------------------------------------</p>\n<p><span style=\"white-space: pre;\"> </span>//comming from the flashed request</p>\n<p><span style=\"white-space: pre;\"> </span>$username = $request-&gt;old('username');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>value=\"{{ old('username') }}\"&gt;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>---------------------------------------------</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request Files:::::::::</p>\n<p><span style=\"white-space: pre;\"> </span>$file = $request-&gt;file('photo');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$file = $request-&gt;photo;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;hasFile('photo')) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;file('photo')-&gt;isValid()) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$path = $request-&gt;photo-&gt;path();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$extension = $request-&gt;photo-&gt;extension();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$path = $request-&gt;photo-&gt;store('images');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$path = $request-&gt;photo-&gt;store('images', 's3');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$path = $request-&gt;photo-&gt;storeAs('images', 'filename.jpg');</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>////////////////////////////////////////////////////////////////////</p>\n<p>&nbsp;</p>\n<p>Redirections:</p>\n<p><span style=\"white-space: pre;\"> </span>return back()-&gt;withInput();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect()-&gt;route('login');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect('home/dashboard');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect()-&gt;route('profile', ['id' =&gt; 1]);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect()-&gt;action(</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>[UserController::class, 'profile'], ['id' =&gt; 1]</p>\n<p><span style=\"white-space: pre;\"> </span>);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect()-&gt;away('https://www.google.com');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return redirect('dashboard')-&gt;with('status', 'Profile updated!');</p>\n<p><span style=\"white-space: pre;\"> </span>@if (session('status'))</p>\n<p><span style=\"white-space: pre;\"> </span>{{ session('status') }}<span style=\"white-space: pre;\"> </span></p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return response()-&gt;json([</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'name' =&gt; 'Abigail',</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'state' =&gt; 'CA',</p>\n<p><span style=\"white-space: pre;\"> </span>&nbsp; ]);</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>return response()-&gt;download($pathToFile);</p>\n<p>&nbsp;</p>\n<p>////////////////////////////////////////////////////////////////////</p>\n<p>Sessions:</p>\n<p><span style=\"white-space: pre;\"> </span>session();</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;all();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>session('key'); //or</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;put('key', 'value');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;session()-&gt;has('users')) { //true if users is not null</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;session()-&gt;exist('users')) { //true if even if users in null</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>if ($request-&gt;session()-&gt;missing('users')) {</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;push('user.teams', 'developers'); // add item to array</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$value = $request-&gt;session()-&gt;pull('key', 'default'); // delete item&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;flash('status', 'Task was successful!'); // store for the nex req</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;now('status', 'Task was successful!');</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;forget(['name', 'status']); //forget two items</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;flush(); //delete all sessions</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;regenerate();</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$request-&gt;session()-&gt;invalidate();</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>//////////////////////////////////////////////////////////////</p>\n<p>&nbsp;</p>\n<p>Validation:</p>\n<p><span style=\"white-space: pre;\"> </span>$validated = $request-&gt;validate([</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'title' =&gt; 'required|unique:posts|max:255',</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'body' =&gt; 'required',</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>]);</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>$validatedData = $request-&gt;validateWithBag('postError', [</p>\n<p>&nbsp; &nbsp; <span style=\"white-space: pre;\"> </span>'title' =&gt; ['required', 'unique:posts', 'max:255'],</p>\n<p><span style=\"white-space: pre;\"> </span>---------@if ($errors-&gt;postError-&gt;any())</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span>@if ($errors-&gt;any())</p>\n<p><span style=\"white-space: pre;\"> </span>@foreach ($errors-&gt;all() as $error)</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>&lt;input ... class=\"@error('title', 'post') is-invalid @enderror\"&gt;</p>\n<p>&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>\n<p><span style=\"white-space: pre;\"> </span></p>"
          ]
        },
        {
          "name": "Dockers",
          "data": [
            "<p style=\"text-align: center;\"><span style=\"background-color: #e03e2d; color: #ffffff; font-size: 24pt;\">docker php.ini</span></p>\n<p style=\"text-align: center;\">&nbsp;</p>\n<p style=\"text-align: center;\">&nbsp;</p>\n<p>docker ps</p>\n<p>docker exec ... cont id bash</p>\n<p>cd /user/local/etc/php</p>\n<p>ls&nbsp; &nbsp; &nbsp; //find php-ini if not found then</p>\n<p>mv php.ini-production php.ini&nbsp; /// rename it</p>\n<p>exit //from the container</p>\n<p>&nbsp;</p>\n<p>docker cp &lt;containerID&gt;:/usr/local/etc/php/php.ini .&nbsp; &nbsp; // where . location files on host</p>\n<p><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp;var/www/html</p>\n<p><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp;Desktop/docker files</p>\n<p>&nbsp;</p>\n<p>volumes:&nbsp;</p>\n<p><span style=\"white-space: pre;\"> </span>- ./php.ini:/user/local/etc/php/php.ini</p>\n<p>now you can edit the php.ini from local</p>\n<p>&nbsp;</p>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt; background-color: #e03e2d; color: #ffffff;\"><strong>Docker Full tutorail</strong></span></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\"><span style=\"font-size: 18.6667px;\">special feature:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; - sail down -v&nbsp; &nbsp; //this will stop the containers and remove all volumes, that if we want to <span style=\"white-space: pre;\"> </span>make some changes for the volumes, ex: to <span style=\"white-space: pre;\"> </span>rename the db in .env in laravel file, so first stop container with -v, then change then name then start&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; - copy files from container directly to local:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker cp &lt;containerID&gt;:/usr/local/etc/php/php.ini . // where . is the local path</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; - run command to container directly without entering to it using bash:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker exec &lt;contaierId&gt; composer install</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span> composer init</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span> composer update</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span> git init</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span> &lt; any other command &gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;- or: using docker-compose, we can use :</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker-compose exec &lt;serviceName&gt; &lt;command&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker-compose exec first-app composer install</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">/////FINAL:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">1. pull the needed images</span></p>\n<p><span style=\"font-size: 18.6667px;\">2. after creating Dockerfile:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>FROM dockerhub image:tag</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>COPY /site3 /var/www/html</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>RUN&nbsp; docker-php-ext-install mysqli \\&nbsp; &nbsp; &nbsp; &nbsp;//&nbsp; \\means install all list down with RUN</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>php-pdo</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>EXPOSE 80&nbsp; &nbsp; //Expose the port of the container</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">3. then can use cmd or docker-compose:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>a. cmd :</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker build -t my-php-app . // build new image from the specified image up</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -it --rm --name my-running-app my-php-app // run the container</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>check down</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>b. docker-compose:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>add version</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>add services:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>service1:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>image:image name //but will not build it, so use instead</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>build: . //build the image in the Dockerfile</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>volumes:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>- ./:/var/www/html</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>enviroment:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ports:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">5. now new container will be loaded for the new image</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>note: any new update for Dockerfile and docker-compose, we should stop the container</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then remove it then remove the image then&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker compose -f docker-compose.yaml up</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">/////ENDFINAL</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">https://www.youtube.com/watch?v=ZlOPCsZpKQY&amp;list=PLCakfctNSHkGYdA82WDUKF3WGyONpGiEw&amp;index=2</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">1. install docker tools</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">2. install image from docker hub: docker pull php:8.1-apache</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">3. docker images // to list all images</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">4. to run the image as container:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -it --name php_container1 php:8.1-apache /bin/bash</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-it: for linux bash command line as specified at the end</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--name: name of the contianer</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>php:8.1-apache is the image we want to run</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">5. if you exit it from cmd then to re-run it: for containers only</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>first start the container:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker start php_container1</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then attach it to the cmd:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker attach php_container1</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">6. docker ps -a</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>list all proccess running or exited</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">7. to stop a running container:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker stop &lt;container id&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">8. docker rm &lt;container id&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">9. create a docker file named: Dockerfile</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>FROM php:8.1.4-apache</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>COPY site/ /var/www/html</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>EXPOSE 80</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">10. then from inside the webdirectroy run the command: this can be replaced by docker-composes</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker build -t php_blabla .&nbsp; /// build an image from an existed image with tag name</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -it --rm --name php_container1 -p 80:80 php_blabla</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -i --rm --name php_cont1 -v C:\\Users\\Ayoub\\Desktop\\newphp\\:/var/www/html/ -p 80:80 php_apache12</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--rm, remove the container after exit</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-v create a volume to make direct changes go on</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-p specify the port of local:container</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\">11. there is a warning saying</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>apache2: Could not reliably determine the server's fully qualified domain&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>to fix it:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>in docker file, add:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>RUN echo \"ServerName localhost\" &gt;&gt; /etc/apache2/apache2.conf</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">12. to fast remove an image:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker rmi &lt;image name&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">////////////////////////////////////////////////////////////////</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker-compose.yml / for multi services to work on parallel</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">1. create a file : docker-compose.yml</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">2.&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">version: '3.7'</span></p>\n<p><span style=\"font-size: 18.6667px;\">services:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; web: //can be named any</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; build: . #. means the Dockerfile which is now in the same directory and can be in differnet</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; container_name: &lt;name&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; depends_on:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; -db // db is the second service, to use to connect to db as the host instead of 127.0.</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; volumes:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; - ./site:/var/www/html or ./:var/www/html</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; ports:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; - 80:80 //ports must not be used, change as needded</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; db:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; image: mysql</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; volumes:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; - ./db_data/:/var/lib/mysql</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; environment:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; &nbsp; MYSQL_ROOT_PASSWORD: 123</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; &nbsp; MYSQL_DATABASE: docker_database</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; ports:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp; &nbsp; &nbsp; - 3306:3306</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">3. then run command :</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker-compose up</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">4. then in another cmd:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker exec -it &lt;mysql_id&gt; bash</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then: mysql -uroot -p&lt;password&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>show databases;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>use &lt;database&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>show tables</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>describe &lt;table name&gt;</span></p>\n<p><span style=\"font-size: 18.6667px;\">5. install mysql workbench</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>and connect to the 127.0 ..:3306</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>and create a new connection with db of the same name and create table</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>it will show in the terminal</span></p>\n<p><span style=\"font-size: 18.6667px;\">//////////////////////////////////////////////////////////////</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">now we have built apache and mysql separtly, and after checking everything works well</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">we have to make the connection with pdo, but apache image has now additinal extensions installed</span></p>\n<p><span style=\"font-size: 18.6667px;\">we have to install them,</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>1. in Dockerfile add:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>RUN docker-php-ext-install pdo pdo_mysql</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>2. then rebuild the container:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>exit the terminal using ctl-c</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then: docker-compose down</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>3.notice that the PDO host is no longer: localhost,<span style=\"white-space: pre;\"> </span></span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>it will be your local ip address:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>192.168.0.&lt;107&gt;, check ipconfig</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">/////////////////////////////////////////////////////</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker commit:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">1. first login: docker login</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">2. docker commit a08cc047bf96 alyhammoud/apache_php_dpo:1.0</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>commit image id of the apache only not mysql</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>to user alyhammoud/&lt;new name image&gt; : with tag name</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">3. this will create a new image: so push this new image :</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker push alyhammoud/apache_php_dpo:1.0</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">4. then chck repository in your docker account</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">////////////////////////////////////////////////////////</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker network to link containers toghter:</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>a. docker network create mongo-network</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>b. #start mongodb:</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -d \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-p 27017:27017 \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-e MONGO_INITDB_ROOT_USERNAME=admin \\<span style=\"white-space: pre;\"> </span></span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-e MONGO_INITDB_ROOT_PASSWORD=password \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--net mongo-network \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--name mongodb #name of the container</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>mongo #name of the image</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>c. # start mongo-express</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>docker run -d \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-p 8081:8081 \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-e ME_CONFIG_MONGODB_ADMINUSERNAME=admin \\<span style=\"white-space: pre;\"> </span></span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-e ME_CONFIG_MONGODB_ADMINPASSWORD=password \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>-e ME_CONFIG_MONGODB_SERVER=mongodb # the name of the container</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--net mongo-network \\</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>--name mongodb #name of the container</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>mongo #name of the image</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>d. then visit: localhost:8081,,,, so, mongo-express is connected to mongodb</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>e. docker network ls</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">////////////////</span></p>\n<p><span style=\"font-size: 18.6667px;\">stop all container / kill // and images</span></p>\n<p><span style=\"font-size: 18.6667px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker kill $(docker ps -q)</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker rm $(docker ps -a -q)</span></p>\n<p><span style=\"font-size: 18.6667px;\">docker rmi $(docker images -q)</span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px;\"> </span></p>\n<p>&nbsp;</p>",
            "<p>asd</p>\n<p>&nbsp;</p>"
          ]
        },
        {
          "name": "Putty for upload",
          "data": [
            "<p style=\"text-align: center;\"><span style=\"background-color: #7e8c8d; color: #ffffff;\"><strong><span style=\"font-size: 18pt; background-color: #7e8c8d;\">Putty and GITHUB</span></strong></span></p>\n<p style=\"text-align: center;\">&nbsp;</p>\n<p style=\"text-align: left;\"><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">1. github: add new repository</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>upload laravel with compser file</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">2. enable ssh in hostinger</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">3. download putty</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>a. add the ip and the port (from hostinger ssh page)</span></span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px; color: #000000;\"> </span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>b. then save with the name you want,, to load it later&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>c. under connection/data --&gt; add auto-user-login: the user u get from hostinger</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then back to home page and save the putty</span></span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px; color: #000000;\"> </span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>d. open puttygen: to generate pub and priv keys</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>i. click generate, then keep moving mouse in the empty panel to fill the key</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ii. save public key: name.pub</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>save private key: name.ppk (add keyphrase as password)</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>iii. in putty:&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>go to SSH/Auth --&gt; upload the private key there</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>e. in hostinger ssh page:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>add the public key we generated:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>edit name.pub,, select the key text and paste it there</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ex:(it should start with ssh-rsa,, we add it manually)</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ssh-rsa&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>AAAAB3NzaC1yc2EAAAADAQABAAABAQChMr4Q60zIKraILZ/Ld59LH/9hvS4hajpX</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">4FwoSDT38RCYjJtYp9PV8VvYmVzs8q0vJZ6V+phxUQGQCYZX1pzL6l5ryzCnm/AW</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">jX/wpNA0q3UFw2hJGP2wy1AroTxSEv</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>make sure to be one line in hostinger textarea, remove spaces and enter (breaks)</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>f. login in putty, it opens the terminalm asks for password we put for the private key</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">4. start using ssh linux commands:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>pwd: to view the working dir</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ls: to list all files/dir</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>we must first: cd domains</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>rm -r api.webname.com</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>git clone https:..... &lt;api.webname.com&gt;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>clone the repo into the same name we removed</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>cd api.webname.com</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ls -la (then all laravel files will be listed)</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>laravel 8.x and 9.x need php 8.1 or later, so go change it</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>from hostinger php configuration of the domain and host</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then run command: composer install</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>&nbsp; composer update</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>to install all packages and vendor</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>cp .env.example .env ( create .env )</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>nano .env</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_NAME=\"the name\"</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_ENV=prod</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_KEY=</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_DEBUG=false</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_URL=https://api.webname.com</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then create db in hositnger in api.webname.com</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then add it in the .env</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then save and exit .env</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>APP_KEY is generated by:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>php artisan key:generate --ansi</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then the key is added into .env</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>then: php artisan migrate</span></span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px; color: #000000;\"> </span></p>\n<p><span style=\"white-space: pre; font-size: 18.6667px; color: #000000;\"> </span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">5. last thing: if we try to visit api.webname.com,, will not open the page since we removed the api.webname.com at first and hostinger looks for public_html as entry point</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>so: we need to point laravel public folder as public_html by:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>so we use symbolic links:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>ln -s public public_html</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">------------------------------------------------------------------------------------------</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">in the main web page where we uploaded vue:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\"><span style=\"white-space: pre;\"> </span>we need to add .htaccess to make redirections go well since we are using webhistory in the router file:</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">.htaccess:<span style=\"white-space: pre;\"> </span></span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">RewriteEngine On</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">&nbsp;</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">RewriteCond %{REQUEST_FILEnAME} !-f</span></span></p>\n<p><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">RewriteCond %{REQUEST_FILEnAME} !-d</span></span></p>\n<p style=\"text-align: left;\"><span style=\"color: #000000;\"><span style=\"font-size: 18.6667px;\">RewriteRule . index.html</span></span></p>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "10/27/2022",
      "depricate": [
        [],
        [],
        []
      ]
    },
    {
      "id": 2,
      "projectId": 2,
      "todo": [
        {
          "name": "Links for nuxt and laravel",
          "data": [
            "<p><span style=\"font-size: 18pt;\"><strong><span style=\"color: #ba372a;\">Vite and Nuxt:</span></strong></span></p>\n<p>https://www.youtube.com/watch?v=R1CdPTLaxas</p>",
            "<p><span style=\"color: #e03e2d; font-size: 18pt;\">laravel packages to run nuxt:</span></p>\n<ol>\n<li>https://dev.to/skyrpex/create-a-spa-with-laravel-and-nuxt--54k</li>\n<li>https://medium.com/vue-mastery/10-reasons-to-use-nuxt-js-for-your-next-web-application-522397c9366b</li>\n</ol>",
            "<p><span style=\"color: #ffffff; background-color: #ba372a;\"><strong>SEO js crawls</strong></span></p>\n<p>https://searchengineland.com/tested-googlebot-crawls-javascript-heres-learned-220157</p>",
            "<p>general idea about nuxt ssr - nginx - laravel - sgg</p>\n<p>https://stackoverflow.com/questions/68654928/which-one-should-i-use-ssr-spa-only-or-ssg-for-my-nuxt-project</p>",
            "<p>// nuxt for deployment, nginx or apache</p>\n<p>https://stackoverflow.com/questions/70736044/how-can-i-deploy-a-nuxt-js-app-to-apache</p>\n<p>// deploy nuxt 2&nbsp;</p>\n<p>https://www.youtube.com/watch?v=pIrL2Nnjvbk&amp;list=PL-lxoPS_1OXXyztiOSLSAlOlxTn82ejKp</p>"
          ]
        },
        {
          "name": "Inertia (make SEO friendly)",
          "data": [
            "<p><span style=\"color: #ffffff; background-color: #e03e2d;\"><span style=\"font-size: 18pt; background-color: #e03e2d;\">Trick to make vue with laravel using inertial js SEO Friendly</span></span></p>\n<p>&nbsp;</p>\n<p>https://dev.to/hazzazbinfaiz/trick-to-make-laravel-inertia-seo-friendly-3h3j</p>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "10/27/2022",
      "depricate": [
        [],
        []
      ]
    },
    {
      "id": 3,
      "projectId": 3,
      "todo": [
        {
          "name": "Installation",
          "data": [
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong><span style=\"color: #e03e2d;\">Installation</span></strong></span></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<ol>\n<li style=\"text-align: left;\"><strong>https://flutter.dev/</strong></li>\n<li style=\"text-align: left;\"><strong>get started</strong></li>\n<li style=\"text-align: left;\"><strong>download git for windows if not isntalled&nbsp;</strong></li>\n<li style=\"text-align: left;\"><strong>download SDK&nbsp; -&gt; 1GB</strong></li>\n<li style=\"text-align: left;\"><strong>extract the sdk into path not name with spaces and special characters and not in c:/programs and files</strong></li>\n<li style=\"text-align: left;\"><strong>for example: this pc/documents/flutterDev</strong></li>\n<li style=\"text-align: left;\"><strong>enter flutterDev/&nbsp; ----&gt; find <span style=\"color: #ba372a;\">flutter_console</span></strong></li>\n<li style=\"text-align: left;\"><strong>run: flutter doctor</strong></li>\n<li style=\"text-align: left;\"><strong>this downloads and&nbsp; installs flutter into computer</strong></li>\n<li style=\"text-align: left;\"><strong>then: start-&gt;search (edit the envirnoment variables)</strong></li>\n<li style=\"text-align: left;\"><strong>click on <span style=\"color: #ba372a;\">path&nbsp;</span></strong></li>\n<li style=\"text-align: left;\"><strong>then click: <span style=\"color: #ba372a;\">edit -&gt; new</span></strong></li>\n<li style=\"text-align: left;\"><strong>in flutterDev: <span style=\"color: #ba372a;\">press shift + right click</span> on <span style=\"color: #ba372a;\">bin </span>folder to <span style=\"color: #ba372a;\">copy the path</span></strong></li>\n<li style=\"text-align: left;\"><strong>paste it as a new variable (remove the qoutations)</strong></li>\n<li style=\"text-align: left;\"><strong>now flutter is accessible from anywhere from the computer</strong></li>\n<li style=\"text-align: left;\"><strong>now if you open terminal and type flutter doctor ( will execute flutter with green check mark on flutter that it worked correctly)</strong></li>\n</ol>"
          ]
        },
        {
          "name": "tutorial links",
          "data": [
            "<p>1.<span style=\"color: #ba372a;\"><strong> flutter mapp:</strong></span> https://www.youtube.com/watch?v=CD1Y2DmL5JM</p>\n<p>2. <strong><span style=\"color: #ba372a;\">flutter teacher:</span></strong>&nbsp;https://www.youtube.com/watch?v=wODGGo_EJXA</p>",
            "<p>Download full courses:&nbsp;</p>\n<ol>\n<li>https://hacksnation.com/d/6702-download-flutter-dart-the-complete-guide-2022-edition-for-free</li>\n<li>https://www.youtube.com/watch?v=x0uinJvhNxI</li>\n</ol>"
          ]
        },
        {
          "name": "Basics of flutter",
          "data": [
            "<p>first enter lib/main.dart</p>\n<p>remove everything and keep void main()&nbsp; ----&gt;&gt; if we want to create a stateful class, if we want satatic and statless page then keep everything and just edit names and logic</p>\n<p>&nbsp;</p>\n<p>&nbsp;type stt and choose statefull to auto fill the statefull class</p>",
            "<p>statless for creating static pages, with all widgets are const</p>",
            "<p>statefull: can declare variables and assign it to be in values</p>\n<p>use setState(){</p>\n<p>x = y</p>\n<p>}</p>",
            "<p style=\"text-align: center;\"><span style=\"color: #e03e2d;\"><strong><span style=\"font-size: 18pt;\">first app with buttons and alignment</span></strong></span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><span style=\"font-family: Consolas, 'Courier New', monospace; white-space: pre; font-size: 14px; color: #569cd6;\">import</span><span style=\"color: #d4d4d4; font-family: Consolas, 'Courier New', monospace; white-space: pre; font-size: 14px;\"> </span><span style=\"font-family: Consolas, 'Courier New', monospace; white-space: pre; font-size: 14px; color: #ce9178;\">'dart:math'</span><span style=\"color: #d4d4d4; font-family: Consolas, 'Courier New', monospace; white-space: pre; font-size: 14px;\">;</span></span></p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\"><br />\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:flutter/material.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">main</span>() {</div>\n<div>&nbsp; <span style=\"color: #dcdcaa;\">runApp</span>(<span style=\"color: #4ec9b0;\">MyApp</span>());</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">MyApp</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">StatefulWidget</span> {</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">MyApp</span>({<span style=\"color: #4ec9b0;\">Key</span>? <span style=\"color: #9cdcfe;\">key</span>}) : <span style=\"color: #569cd6;\">super</span>(<span style=\"color: #9cdcfe;\">key</span>: <span style=\"color: #9cdcfe;\">key</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">MyApp</span>&gt; <span style=\"color: #dcdcaa;\">createState</span>() =&gt; <span style=\"color: #4ec9b0;\">_MyAppState</span>();</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">_MyAppState</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">MyApp</span>&gt; {</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">String</span> <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Click'</span>;</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">int</span> <span style=\"color: #9cdcfe;\">currentIndex</span> = <span style=\"color: #b5cea8;\">0</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Widget</span> <span style=\"color: #dcdcaa;\">build</span>(<span style=\"color: #4ec9b0;\">BuildContext</span> <span style=\"color: #9cdcfe;\">context</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">MaterialApp</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">debugShowCheckedModeBanner</span>: <span style=\"color: #569cd6;\">false</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">home</span>: <span style=\"color: #4ec9b0;\">Scaffold</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">appBar</span>: <span style=\"color: #4ec9b0;\">AppBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'App Titleee'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span>: <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">SizedBox</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">width</span>: <span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #9cdcfe;\">infinity</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Column</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">mainAxisAlignment</span>: <span style=\"color: #4ec9b0;\">MainAxisAlignment</span>.<span style=\"color: #4fc1ff;\">center</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">crossAxisAlignment</span>: <span style=\"color: #4ec9b0;\">CrossAxisAlignment</span>.<span style=\"color: #4fc1ff;\">start</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">children</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">ElevatedButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Clicked'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #9cdcfe;\">buttonName</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">ElevatedButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Clicked'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #9cdcfe;\">buttonName</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">bottomNavigationBar</span>: <span style=\"color: #4ec9b0;\">BottomNavigationBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">items</span>: <span style=\"color: #569cd6;\">const</span> [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">BottomNavigationBarItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">label</span>: <span style=\"color: #ce9178;\">\"Setting\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(<span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">settings</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">tooltip</span>: <span style=\"color: #ce9178;\">\"Settingsssss\"</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">BottomNavigationBarItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">label</span>: <span style=\"color: #ce9178;\">\"Most\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">home</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">size</span>: <span style=\"color: #b5cea8;\">35.0</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">semanticLabel</span>: <span style=\"color: #ce9178;\">'Text to announce in accessibility modes'</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ))</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">currentIndex</span>: <span style=\"color: #9cdcfe;\">currentIndex</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onTap</span>: (<span style=\"color: #4ec9b0;\">int</span> <span style=\"color: #9cdcfe;\">index</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">currentIndex</span> = <span style=\"color: #9cdcfe;\">index</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n</div>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong>using container istead of sizeof</strong></span></p>\n<p style=\"text-align: center;\">&nbsp;</p>\n<p style=\"text-align: left;\"><span style=\"background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; white-space: pre; color: #569cd6;\">import</span><span style=\"background-color: #1e1e1e; color: #d4d4d4; font-family: Consolas, 'Courier New', monospace; white-space: pre;\"> </span><span style=\"background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; white-space: pre; color: #ce9178;\">'dart:math'</span><span style=\"background-color: #1e1e1e; color: #d4d4d4; font-family: Consolas, 'Courier New', monospace; white-space: pre;\">;</span></p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\"><br />\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:flutter/material.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">main</span>() {</div>\n<div>&nbsp; <span style=\"color: #dcdcaa;\">runApp</span>(<span style=\"color: #4ec9b0;\">MyApp</span>());</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">MyApp</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">StatefulWidget</span> {</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">MyApp</span>({<span style=\"color: #4ec9b0;\">Key</span>? <span style=\"color: #9cdcfe;\">key</span>}) : <span style=\"color: #569cd6;\">super</span>(<span style=\"color: #9cdcfe;\">key</span>: <span style=\"color: #9cdcfe;\">key</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">MyApp</span>&gt; <span style=\"color: #dcdcaa;\">createState</span>() =&gt; <span style=\"color: #4ec9b0;\">_MyAppState</span>();</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">_MyAppState</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">MyApp</span>&gt; {</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">String</span> <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Click'</span>;</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">int</span> <span style=\"color: #9cdcfe;\">currentIndex</span> = <span style=\"color: #b5cea8;\">0</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Widget</span> <span style=\"color: #dcdcaa;\">build</span>(<span style=\"color: #4ec9b0;\">BuildContext</span> <span style=\"color: #9cdcfe;\">context</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">MaterialApp</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">debugShowCheckedModeBanner</span>: <span style=\"color: #569cd6;\">false</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">home</span>: <span style=\"color: #4ec9b0;\">Scaffold</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">appBar</span>: <span style=\"color: #4ec9b0;\">AppBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'App Titleee'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span>: <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Container</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">width</span>: <span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #9cdcfe;\">infinity</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">height</span>: <span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #9cdcfe;\">infinity</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">color</span>: <span style=\"color: #4ec9b0;\">Colors</span>.<span style=\"color: #9cdcfe;\">red</span>,</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Row</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">mainAxisAlignment</span>: <span style=\"color: #4ec9b0;\">MainAxisAlignment</span>.<span style=\"color: #4fc1ff;\">center</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">crossAxisAlignment</span>: <span style=\"color: #4ec9b0;\">CrossAxisAlignment</span>.<span style=\"color: #4fc1ff;\">center</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">children</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">ElevatedButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">style</span>: <span style=\"color: #4ec9b0;\">ElevatedButton</span>.<span style=\"color: #dcdcaa;\">styleFrom</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">foregroundColor</span>: <span style=\"color: #4ec9b0;\">Colors</span>.<span style=\"color: #9cdcfe;\">white</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">backgroundColor</span>: <span style=\"color: #4ec9b0;\">Colors</span>.<span style=\"color: #9cdcfe;\">orange</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Clicked'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #9cdcfe;\">buttonName</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">ElevatedButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">buttonName</span> = <span style=\"color: #ce9178;\">'Clicked'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #9cdcfe;\">buttonName</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">bottomNavigationBar</span>: <span style=\"color: #4ec9b0;\">BottomNavigationBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">items</span>: <span style=\"color: #569cd6;\">const</span> [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">BottomNavigationBarItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">label</span>: <span style=\"color: #ce9178;\">\"Setting\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(<span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">settings</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">tooltip</span>: <span style=\"color: #ce9178;\">\"Settingsssss\"</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">BottomNavigationBarItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">label</span>: <span style=\"color: #ce9178;\">\"Most\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">home</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">size</span>: <span style=\"color: #b5cea8;\">35.0</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">semanticLabel</span>: <span style=\"color: #ce9178;\">'Text to announce in accessibility modes'</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ))</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">currentIndex</span>: <span style=\"color: #9cdcfe;\">currentIndex</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onTap</span>: (<span style=\"color: #4ec9b0;\">int</span> <span style=\"color: #9cdcfe;\">index</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">currentIndex</span> = <span style=\"color: #9cdcfe;\">index</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n</div>",
            "<p>flutter to deal with images: use:</p>\n<p>Image.network( link from pexels or .. );</p>\n<p>------------------------------------------------------</p>\n<p>Image.asset('images/abc.png'),</p>\n<p>but first:&nbsp;</p>\n<p>create new folder name 'assets' or images or ...</p>\n<p>then, go to file: pubspec.yaml</p>\n<p>scroll down to find :</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;assets&nbsp; --&gt; un-comment it</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp;and down add the path to folder images:</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; images/</p>"
          ]
        },
        {
          "name": "udemy tutorial",
          "data": [
            "<ol>\n<li>Link:&nbsp; &nbsp; https://mega.nz/folder/C0BmXZhC#G57vmsZ9ENh-lFUV6j5J5g/folder/GhwWEaCR</li>\n<li>folder</li>\n<li>; 04</li>\n<li>file: finished 74</li>\n</ol>",
            "<p>to fromat date and time: we need to get a new package since no built in functions for managin that:&nbsp;</p>\n<ol>\n<li>INTL package</li>\n<li>get it from pub.dev for dart</li>\n<li>check installing</li>\n<li>import it to the file</li>\n<li>then any date variable can be added like:&nbsp; DateFormat('yyyy-MM-dd').format(date time variable);</li>\n<li>check documentation</li>\n</ol>\n<p>&nbsp;</p>",
            "<p>Input fields:</p>\n<ol>\n<li>TextField();</li>\n<li>can have styling</li>\n<li>to get the input and store to class property:</li>\n<li>use:</li>\n<li>final stringInputVariable = TextEditingController();</li>\n<li>then: TextFiled( controller : stringInputVariable )</li>\n</ol>",
            "<p>ListView(Children:[]) vs ListView.builder();</p>\n<ol>\n<li>use LiveView(children:[]) when wen know the max item ex 7 or 8 we want to scroll to</li>\n<li>use ListView.builder()&nbsp; &nbsp;when there is a huge number of items to scroll</li>\n</ol>\n<p>&nbsp;</p>\n<p>Both should be wrapped in a Container and having a height not greater than the height of the screen</p>\n<p>&nbsp;</p>\n<p>ListView(children: we iterate using List.map(item =&gt; widgets)</p>\n<p>&nbsp;</p>\n<p>ListView.builder(</p>\n<p>itemCount: List.length</p>\n<p>itemBuidler: (context, index){</p>\n<p>widgets</p>\n<p>&nbsp; &nbsp; &nbsp; List[index].value</p>\n<p>}</p>\n<p>&nbsp;</p>",
            "<p>To set a TextField only accepts integer:</p>\n<p>TextField(</p>\n<p>keyboardType: TextInputType.number</p>\n<p>or since ios might not allow for decimal places use:&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">keyboardType</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">TextInputType</span>.<span style=\"color: #dcdcaa;\">numberWithOptions</span>(<span style=\"color: #9cdcfe;\">decimal</span>: <span style=\"color: #569cd6;\">true</span>),</div>",
            "<p>Add Floating buttons to body:</p>\n<p>bpdy:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #9cdcfe;\">floatingActionButtonLocation</span>: <span style=\"color: #4ec9b0;\">FloatingActionButtonLocation</span>.<span style=\"color: #9cdcfe;\">centerFloat</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">floatingActionButton</span>: <span style=\"color: #4ec9b0;\">FloatingActionButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: (){</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Icon</span>(<span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">add</span>),</div>\n<div>&nbsp; &nbsp; ),</div>\n</div>\n<p style=\"padding-left: 40px;\">&nbsp;</p>",
            "<p>add Icon to app bar:</p>\n<p>appBar: AppBar(</p>\n<p style=\"padding-left: 40px;\">actions: [</p>\n<p style=\"padding-left: 80px;\">IconButton(onPressed: () {},</p>\n<p style=\"padding-left: 80px;\">Icon(Icons.add),</p>\n<p style=\"padding-left: 40px;\">])</p>",
            "<p>To add a new font</p>\n<p>add the fonts into a new directory in the root dir, ex: assets/fonts then add all the font files</p>\n<p>then go to pubsec.yaml and under fonts add a custom name and the path,</p>\n<p style=\"padding-left: 80px;\">make sure if a font is bold no reqular, should add, weight: 700</p>\n<p style=\"padding-left: 80px;\">or the font is italic: style: italic</p>",
            "<p><span style=\"color: #e03e2d;\"><strong>Theming the app by giving a top level styling::</strong></span></p>\n<p>in MaterailApp(</p>\n<p>theme: ThemeData(</p>\n<p style=\"padding-left: 40px;\">primarySwatch: Colors.red // this is the main color for the app</p>\n<p style=\"padding-left: 40px;\">fontFamily: 'OpenSans',</p>\n<p style=\"padding-left: 40px;\">appBarTheme: AppBarTheme(</p>\n<p style=\"padding-left: 80px;\">titleTextStyle: TextStyle(&nbsp;</p>\n<p style=\"padding-left: 120px;\">fontFamily: ...</p>\n<p style=\"padding-left: 120px;\">fonsize: 20</p>\n<p style=\"padding-left: 120px;\">fontWeigh: FontWeigh.bold</p>\n<p style=\"padding-left: 80px;\">)</p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ba372a;\">To make a textTheme and refer it agian in any widget:</span></p>\n<p style=\"padding-left: 40px;\"><span style=\"color: #ba372a;\">ThemeData.light().textTheme.copyWith( titleLarge: TextStyle(...)</span></p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p><span style=\"color: #ba372a;\">in Widget: ex:&nbsp;</span></p>\n<p style=\"padding-left: 40px;\"><span style=\"color: #ba372a;\">Text('click me', style: Theme.of(context).themeData.titleLarge</span></p>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong><em>DateTime picker::</em></strong></span></p>\n<ol>\n<li style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><em>First we need a button: style it as we want and give it a child</em></span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><em>onPressed: (){ we create a function that has a FUTURE }</em></span></li>\n<li style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><em>void callableFunction(){</em></span></li>\n</ol>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>showDatePicker(</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; context: context,</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; initialDate: DateTime.now(),</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; firstDate: DateTime(2022),</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; lastDate: DateTime.now(),</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; ).then((pickedDate) {</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; if (pickedDate == null) {</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; &nbsp; return;</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; }</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp;</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; setState(() {</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; &nbsp; _selectDate = pickedDate;</em></span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; &nbsp; });</em></span></p>\n<p style=\"padding-left: 160px;\">&nbsp;</p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 18.6667px;\"><em>&nbsp; &nbsp; });</em></span></p>\n<ol>\n<li><span style=\"font-size: 18.6667px;\"><em>then we can edit the first and last date and active day etc....</em></span></li>\n</ol>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 14pt;\"><strong>Some Widgets Review:</strong></span></p>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li style=\"text-align: left;\"><strong><span style=\"font-size: 12pt;\">Container()</span></strong>\n<ol>\n<li style=\"list-style-type: none;\">\n<ol>\n<li style=\"text-align: left;\"><span style=\"font-size: 12pt;\">Container can have height and width and margins and padding as we can make it circle::</span></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 12pt;\">Container(</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;Padding: EdgeInsets.all(5)&nbsp; or .symectric(vertical: 10, horizontal: 10)</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 12pt;\">&nbsp; &nbsp; &nbsp;margin: the same ....</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp;Container(</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height: 60,</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 60,</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: BoxDecoration(</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; color: Theme.of(context).primaryColor,</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; shape: BoxShape.circle</span></p>\n<p style=\"padding-left: 200px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></p>\n<ul>\n<li><span style=\"font-size: 16px;\"><strong>CircleAvatar</strong>: if our goal is to have a circle container and dont need any other decoration ( only some are in common), it is better to use:</span></li>\n</ul>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">CircleAvatar(</span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 16px;\">radius: ... // it is oblegatory</span></p>\n<p style=\"padding-left: 160px;\"><span style=\"font-size: 16px;\">more decorations and styles // has no padding and margins</span></p>\n<p style=\"padding-left: 160px;\">&nbsp;</p>\n<ul>\n<li><span style=\"font-size: 16px;\"><strong>Padding</strong>: if we want a wrapper jus to have padding we can use padding which has only padding: ..</span></li>\n<li><span style=\"font-size: 16px;\"><strong>FittedBox()</strong>: is to make the Wrapped object fit the parent, we can use :</span>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li><span style=\"font-size: 16px;\">fit: BoxFit.contain&nbsp; &nbsp; &nbsp;.cover&nbsp; &nbsp; &nbsp;... .fill&nbsp; ... etc.</span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span style=\"font-size: 16px;\"><strong>ListView.builder() vs ListView();</strong> ===&gt; check notes up, in Udemy</span></li>\n<li><span style=\"font-size: 16px;\"><strong>Column() and Row()</strong> :</span>\n<ul>\n<li><span style=\"font-size: 16px;\">Both take children: []</span></li>\n<li><span style=\"font-size: 16px;\">cant be scrollable, and cant be styled, better to be wrapped with Containers or Cars or SizedBox</span></li>\n</ul>\n</li>\n<li><strong><span style=\"font-size: 16px;\">ListTile():&nbsp;</span></strong><span style=\"font-size: 16px;\">must have :</span>\n<ul>\n<li><span style=\"font-size: 16px;\">Leading: Container() or Card() or a Wrapper ==&gt; this is the first element to show on ListTile()</span></li>\n<li><span style=\"font-size: 16px;\">title: Text()</span></li>\n<li><span style=\"font-size: 16px;\">subTitle() comes under the title with small size</span></li>\n<li><span style=\"font-size: 16px;\">trailing: end of the ListTile</span></li>\n</ul>\n</li>\n<li><strong><span style=\"font-size: 16px;\">GridTile() // same to listTile but in grid, widgets next to each other</span></strong></li>\n<li><strong><span style=\"font-size: 16px;\">SingleChildScrollView():&nbsp;</span></strong><span style=\"font-size: 16px;\">make a single Widget scrollable</span></li>\n<li><span style=\"font-size: 16px;\"><strong>Flexible()</strong>: it is to make the wrapped widgets flexible to the parent</span>\n<ul>\n<li style=\"list-style-type: none;\">\n<ul>\n<li><span style=\"font-size: 16px;\">fit: FlexFit.tight&nbsp; &nbsp; &nbsp;==&gt; if fills all the white space</span></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span style=\"font-size: 16px;\"><strong>Expanded()</strong> : is <strong>Flexible()</strong> Widget but it directly set FlexFit.tight without needing to mention it</span></li>\n</ul>\n<p><span style=\"font-size: 16px;\">&nbsp;</span></p>\n<ul>\n<li><span style=\"font-size: 16px;\"><strong>GestureDetected()</strong>:&nbsp;</span></li>\n</ul>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">GestureDetector(</span></p>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onTap: () {},</span></p>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; behavior: HitTestBehavior.opaque,</span></p>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; child: NewTransaction(_addNewTransaction),</span></p>\n<p style=\"padding-left: 120px;\">&nbsp;</p>\n<p style=\"padding-left: 120px;\">&nbsp;</p>\n<p style=\"padding-left: 120px;\"><span style=\"font-size: 16px;\">&nbsp; &nbsp; &nbsp; &nbsp; );</span></p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">InkWell() //similar to GestureDetector wich built in animation</span></strong></p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">Card( margin: , child: Padding() or Container() or Column...</span></strong></p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">Chip() // a rounded shape similar to CircularAvatr()</span></strong></p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">Spacer() /// fills all the space between the Widgets</span></strong></p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">ClipRRect()&nbsp; &nbsp;// this force to make the children have a border radius same as parent&nbsp;</span></strong></p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">In appBar( actions: [&nbsp;</span></strong></p>\n<p style=\"padding-left: 80px;\"><strong><span style=\"font-size: 16px;\">PopupMenuButtons() 3 dots above eache others</span></strong></p>\n<p style=\"padding-left: 80px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\"><strong><span style=\"font-size: 16px;\">Divider() // this adds a horizontal line between the widgets</span></strong></p>\n<p style=\"padding-left: 80px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 160px;\">&nbsp;</p>\n<p>&nbsp;</p>",
            "<p style=\"text-align: center;\"><strong><span style=\"font-size: 18pt;\">Media Query</span></strong></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">In order to get the full remaining height instead of asignin a fixed heigh or width:</span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">in Container(</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">height: MediaQuery.of(context).size.height * 0.6&nbsp; // get 60% of the screen</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">make sure other widget calculates to have the other 40%</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">then to get exact height or width:</span></p>\n<p style=\"text-align: left; padding-left: 40px;\">&nbsp;</p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">put appBar in final variable named: final appBar = AppBar( title: ... )</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">in appBar: appBar</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">then in Container(</span></p>\n<p style=\"text-align: left; padding-left: 80px;\"><span style=\"font-size: 14pt;\">height: (MediaQuery.of(context).size.height - appBar.preferredSize.height - MediaQuery.of(x).padding) * 0.5</span></p>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong>LayoutBuilder</strong></span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">LayoutBuilder((){}) : is used to set the child Widget having and all its children inside to get fractinal height and width:</span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">return LayoutBuilder((context, constraints) {</span></p>\n<p style=\"text-align: left; padding-left: 40px;\"><span style=\"font-size: 14pt;\">return Column(</span></p>\n<p style=\"text-align: left; padding-left: 80px;\"><span style=\"font-size: 14pt;\">children: [</span></p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"font-size: 14pt;\">Container(</span></p>\n<p style=\"text-align: left; padding-left: 160px;\"><span style=\"font-size: 14pt;\">height: constraints.maxHeight * 0.5&nbsp; &nbsp;// this having 50% of the parent</span></p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"font-size: 14pt;\">),</span></p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"font-size: 14pt;\">SizedBox( height: constraints.maxHeight * 0.25&nbsp;</span></p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"font-size: 14pt;\">.....</span></p>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong>Disable portrait</strong></span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\"><strong>since some app when using protrait mode it is hard to manage some widgets to get the height and width, one solution is to disable protrait:</strong></span></p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">main</span>() {</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">WidgetsFlutterBinding</span>.<span style=\"color: #dcdcaa;\">ensureInitialized</span>();</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">SystemChrome</span>.<span style=\"color: #dcdcaa;\">setPreferredOrientations</span>([</div>\n<div>&nbsp; &nbsp; <span style=\"color: #4ec9b0;\">DeviceOrientation</span>.<span style=\"color: #4fc1ff;\">portraitUp</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #4ec9b0;\">DeviceOrientation</span>.<span style=\"color: #4fc1ff;\">portraitDown</span>,</div>\n<div>&nbsp; ]);</div>\n<div>&nbsp; <span style=\"color: #dcdcaa;\">runApp</span>(<span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">MyApp</span>());</div>\n<div>}</div>\n</div>",
            "<p>detect if land scape mode:</p>\n<p>make a final varibale: under @overrride to get the context:</p>\n<p>final isLandScape = MediaQuety.of(context).orientation == Orientation.landascap;&nbsp; &nbsp; //// when a user rotate the screen it returns true, other than that it is false</p>",
            "<p style=\"text-align: center;\"><span style=\"font-size: 18pt;\"><strong>Adaptive Flutter: if ios or android</strong></span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">for some Widgets like Switch() :: which is a toggle button its design on android differs from ios</span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">if we keep it Switch() the same design work on both, but:</span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">we can use -------&gt; Switch.adaptive( ... )</span></p>\n<p style=\"text-align: left;\"><span style=\"font-size: 14pt;\">this changes the toggle button in ios to ios Switch shape</span></p>",
            "<p style=\"text-align: center;\"><strong>Another Adaptive: check if IOS or any other os</strong></p>\n<p style=\"text-align: left;\">import 'dart: ios';</p>\n<p style=\"text-align: left;\">then use ternary expressing in children widget: ex:</p>\n<p style=\"text-align: left;\"><span style=\"color: #e03e2d;\">Platform.isIOS ? Container() : FloatingActionButton ()</span></p>\n<p style=\"text-align: left;\"><span style=\"color: #000000;\">we hide the action button from ios users on ios dont like or not used to it</span></p>",
            "<p style=\"text-align: center;\"><strong>Cupertin (IOS) Widget</strong></p>\n<p style=\"text-align: left;\"><strong>in order to make different look btween ios and android, Scaffold is used for android, but instead use CupertinoPageScaffold(child: )</strong></p>\n<p style=\"text-align: left;\"><strong>ex:</strong></p>\n<p style=\"text-align: left;\">import 'package:flutter/cupertino.dart'</p>\n<p style=\"text-align: left;\">body: Platform.isIOS</p>\n<p style=\"text-align: left; padding-left: 40px;\">?SafeArea( CupertinoPageScaffold ( child: )&nbsp; ,) //ios&nbsp; &nbsp;//safeArea is to leave space between notification bar and the beggining of the app</p>\n<p style=\"text-align: left; padding-left: 40px;\">: Scaffold()&nbsp; &nbsp;//android</p>\n<p style=\"text-align: left; padding-left: 40px;\">&nbsp;</p>\n<p style=\"text-align: left;\"><strong>Since ISO does not have app bar same to android:</strong></p>\n<p style=\"text-align: left;\">it is preferred to use:</p>\n<p style=\"text-align: left;\">make a final variable :</p>\n<p style=\"text-align: left; padding-left: 40px;\">final dynamic appBar = Platform.isIOS&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;// we used dynamic since preferredSize need to be defined, check docs</p>\n<p style=\"text-align: left; padding-left: 160px;\">? CurpetinoNavigationBar()&nbsp; // ios</p>\n<p style=\"text-align: left; padding-left: 160px;\">: AppBar()&nbsp; // android</p>\n<p style=\"text-align: left; padding-left: 160px;\">&nbsp;</p>\n<p style=\"text-align: left; padding-left: 40px;\">CupertinoNavigationBar takes different arguments, since it is structured differently from AppBar which is for android: ex:</p>\n<p style=\"text-align: left; padding-left: 80px;\">CupertinoNavigationBar(</p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"color: #e03e2d;\">middle</span>: Text('Title'),</p>\n<p style=\"text-align: left; padding-left: 120px;\"><span style=\"color: #e03e2d;\">trailing:</span> Row(</p>\n<p style=\"text-align: left; padding-left: 160px;\"><span style=\"color: #e03e2d;\">mainAxisSize: MainAxisSize.min</span>; // this is good to give the row not the full width of the screen</p>\n<p style=\"text-align: left; padding-left: 160px;\">children: [</p>\n<p style=\"text-align: left; padding-left: 200px;\">GestureDetector( onTap: (){}, child: Icon(<span style=\"color: #e03e2d;\">CupertinoIcons.add</span>)&nbsp; &nbsp;/<span style=\"color: #e03e2d;\">/cant have normal icons&nbsp;</span></p>\n<p style=\"text-align: left; padding-left: 160px;\">&nbsp;</p>",
            "<p style=\"text-align: center;\">GestureDetector vs InkWell:</p>\n<p style=\"text-align: left;\">Both are the same provide onTap but:</p>\n<p style=\"text-align: left;\">GestureDetector has more control than InkWell();</p>\n<p style=\"text-align: left;\">InkWell has more effects and styling than GestureDetector()</p>\n<p style=\"text-align: left;\">use as may we need</p>\n<p style=\"text-align: left;\">ex: InkWell(</p>\n<p style=\"text-align: left;\">onTap: (){{</p>\n<p style=\"text-align: left;\">splashColor: color.ss</p>\n<p style=\"text-align: left;\">borderRadius: BorderRadius.Cirular(10)</p>",
            "<p style=\"text-align: center;\">Navigator:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #4ec9b0;\">Navigator</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">ctx</span>).<span style=\"color: #dcdcaa;\">push</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">MaterialPageRoute</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">_</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">CategoryMealsScreen</span>();</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; );</div>\n</div>",
            "<p style=\"text-align: center;\">Navigation with namedRoute:</p>\n<p style=\"text-align: left;\">onTap: (){</p>\n<p style=\"text-align: left; padding-left: 40px;\">Navigator.of(ctx).pushNamed('/categories', arguments: {'id': id, 'title': title) }</p>\n<p style=\"text-align: left; padding-left: 40px;\">&nbsp;</p>\n<p style=\"text-align: left;\">But: ---&gt;&gt; make sure to add in the material app:</p>\n<p style=\"text-align: left;\">home: MyHomePage(),</p>\n<p style=\"text-align: left;\">routes: {</p>\n<p style=\"text-align: left; padding-left: 40px;\">'/categories' : (ctx) =&gt; Categories()&nbsp; //use the builder function</p>\n<p style=\"text-align: left; padding-left: 40px;\">}</p>\n<p style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>Then in the Categories(), this custom widget which we want to navigate to: it should has no constructor with arguments, on super.key;</strong></span></p>\n<p style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>so to pass arguments to it rathar than using the cosntructor we use :</strong></span></p>\n<ol>\n<li style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>under build(BuildContext context)</strong></span></li>\n<li style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>final argsVar = ModalRoute.of(context)?.settings.arguments&nbsp; as Map&lt;string, String&gt;</strong></span></li>\n<li style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>final title = argsVar['title'];</strong></span></li>\n<li style=\"text-align: left;\"><span style=\"color: #e03e2d;\"><strong>final id = argsVar['id'];</strong></span></li>\n</ol>",
            "<p style=\"text-align: center;\">More in the pushNamed() Navigator:</p>\n<p style=\"text-align: left;\">in main.dart: return MaterialApp( title, theme:, home: MainHomePage()</p>\n<p style=\"text-align: left;\">we can remove home: and make it as route:::</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div>\n<div style=\"line-height: 19px;\"><span style=\"color: #6a9955;\">// home: const CategoriesScreen(),</span></div>\n</div>\n<div><span style=\"color: #9cdcfe;\">initialRoute</span>: <span style=\"color: #ce9178;\">'/home'</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">routes</span>: &nbsp;{</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'/home'</span>: (<span style=\"color: #9cdcfe;\">ctx</span>) =&gt; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">CategoriesScreen</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'/categories-meals'</span>: (<span style=\"color: #9cdcfe;\">ctx</span>) =&gt; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">CategoryMealsScreen</span>()</div>\n<div>&nbsp; &nbsp; }</div>\n</div>",
            "<p style=\"text-align: center;\">TabBar in appBar:</p>\n<ol>\n<li style=\"text-align: left;\">make a new page, statefull one for ex:</li>\n<li style=\"text-align: left;\">it should return istead of Scaffold(), it might return <span style=\"background-color: #ba372a;\">DefaultTabController()</span></li>\n</ol>\n<p>&nbsp;</p>\n<p style=\"padding-left: 40px;\">DefaultTabController() should have length, the number of tabs and a child of Scaffold() which in return has appBar: and body:</p>\n<p style=\"padding-left: 40px;\">DefaultTabController(</p>\n<p style=\"padding-left: 80px;\">length: 2,</p>\n<p style=\"padding-left: 80px;\">child: Scaffold(</p>\n<p style=\"padding-left: 120px;\">appBar: AppBar(</p>\n<p style=\"padding-left: 160px;\">title: 'title',</p>\n<p style=\"padding-left: 160px;\">bottom: const TabBar(</p>\n<p style=\"padding-left: 200px;\">tabs: [</p>\n<p style=\"padding-left: 240px;\">Tab(</p>\n<p style=\"padding-left: 280px;\">icon: Icon(Icons.add)</p>\n<p style=\"padding-left: 280px;\">text: 'Add'</p>\n<p style=\"padding-left: 240px;\">)</p>\n<p style=\"padding-left: 240px;\">Tab()</p>\n<p style=\"padding-left: 240px;\">],</p>\n<p style=\"padding-left: 120px;\">body:<span style=\"color: #ba372a;\"> TabBarView</span>(children : [])&nbsp;</p>\n<p style=\"padding-left: 80px;\">)</p>\n<p style=\"padding-left: 80px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>",
            "<p style=\"text-align: center;\">BottomNavigationBar: is another way to make navigation</p>\n<p style=\"text-align: center;\">in bottom of Scaffod()</p>\n<p style=\"text-align: center;\">add</p>\n<ol>\n<li style=\"text-align: left;\">bottomNavigationBar(</li>\n<li style=\"text-align: left;\">onTap: (){ _selectedPage}\n<ol>\n<li>_selectedPage is a Function takes argument of index which is dynamically caught by Flutter, so if we are in tab 0, index is 0 if 1 index is 1.</li>\n<li>it is better to define a final pageIndex ==&gt; then setState() { pageIndex = index),, inside the function</li>\n</ol>\n</li>\n<li>currentIndex: _pageIndex</li>\n<li>styling ==&gt; set directly backgroundColor, unselectedItemColor ,,</li>\n<li>also, the main part is: items: []</li>\n<li><span style=\"color: #e03e2d;\">BottomNavigationBarItem(icon: Icon(Icons.add), label: 'category')</span></li>\n<li>then in Scaffold( body: should take the from list defined ex:<br />\n<ol>\n<li>final _pages = [ CategoryScreen(), FavoriteScreen()]</li>\n</ol>\n</li>\n<li>then body: _pages[_pageIndex]</li>\n<li>so when switching between pages the page of the index shows</li>\n<li>Note: _pages must have no Scaffold, since it inherits from the tabs_screen</li>\n</ol>",
            "<p style=\"text-align: center;\">Drawer with hamburger menu:</p>\n<p style=\"text-align: left;\">In Scaffold( just add appBar and body, as well can add Drawer()</p>\n<p style=\"text-align: left;\">Drawer(</p>\n<p style=\"text-align: left;\">&nbsp; &nbsp;Column</p>\n<p style=\"text-align: left;\">&nbsp; &nbsp;ListTile(onTap: () =&gt; Navigator.of(context).pushReplacementNamed('/');</p>\n<p style=\"text-align: left;\">this removes the page before</p>",
            "<p style=\"text-align: center;\">Provider state management:</p>\n<ol>\n<li style=\"text-align: left;\">install flutter provider</li>\n<li style=\"text-align: left;\">create a file, with a class name: imp material.dart</li>\n<li style=\"text-align: left;\">class Products with ChangeNotifier{}</li>\n<li style=\"text-align: left;\">make a final private property</li>\n<li style=\"text-align: left;\">ex: final _count = 0;</li>\n<li style=\"text-align: left;\">then add the getter, the getter can be accessed out this class: ex</li>\n<li style=\"text-align: left;\">int get count =&gt; _count</li>\n<li style=\"text-align: left;\">then, add functions : void add() {</li>\n<li style=\"text-align: left;\">add++;</li>\n<li style=\"text-align: left;\">notifyListeners();&nbsp; //this is obligatory to put at the end of every function, to apply changes to the properties</li>\n<li style=\"text-align: left;\">here the provider class finished</li>\n</ol>\n<p>&nbsp;</p>\n<p><span style=\"color: #e03e2d;\">then, in main.dart if we have only one state:</span></p>\n<ol>\n<li>surround the MaterialApp with:</li>\n<li>return ChangeNotifierProvider(\n<ol>\n<li>create: (context) =&gt; ProviderName()</li>\n<li>child: MaterialApp( // should have routes: {}</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<p>if we have more than one Provider:</p>\n<ol>\n<li>in the main.dart, in the main function : void main(){ runApp() }</li>\n<li>instead: void main(){\n<ol>\n<li>MultiProvider(\n<ol>\n<li>provider: [\n<ol>\n<li>ChangeNotifierProvider(create: (_) =&gt; ProviderName()</li>\n<li>ChangeNotifierProvider (create (_) =&gt; ProviderName2()</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<p>how to get the data of the state:</p>\n<ol>\n<li>in the needed widget or screen:</li>\n<li>import '.. material'</li>\n<li>import 'package:provider/provider.dart'</li>\n<li>import ' the file of the needed state';</li>\n<li>Then:</li>\n<li><span style=\"color: #000000;\">to get the data 2 ways: inside the builder functions:</span>\n<ol>\n<li>final productId = context.read&lt;Products&gt;().thePropertyName<span style=\"color: #000000;\">;&nbsp; &nbsp;</span><span style=\"color: #e03e2d;\">//make sure to generic the state, &lt;Products&gt;</span></li>\n<li>Provider.of&lt;Products&gt;(context).PropertyName<span style=\"color: #000000;\">&nbsp; &nbsp; &nbsp;<span style=\"color: #e03e2d;\">//make sure to generic the state, &lt;Products&gt;</span></span></li>\n<li>third one is: no need to define vars, instead make a Widget named Consumer()</li>\n<li>Consumer&lt;Product&gt;(builder: (ctx, varProduct, child) =&gt; return a Widget wich is always listens true, if Consumer is part of of(context, listen: false),, Consumer remains true, and availble to change</li>\n<li>ex:::&nbsp; only Consumer( is availble to change)</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">final</span> <span style=\"color: #9cdcfe;\">product</span> = <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Product</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>); <span style=\"color: #6a9955;\">// this widget is listen false, but we use Consumer down for favorite, it is excluded and ca be change</span></div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">ClipRRect</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">borderRadius</span>: <span style=\"color: #4ec9b0;\">BorderRadius</span>.<span style=\"color: #dcdcaa;\">circular</span>(<span style=\"color: #b5cea8;\">10</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">GridTile</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">footer</span>: <span style=\"color: #4ec9b0;\">GridTileBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">leading</span>: <span style=\"color: #4ec9b0;\">Consumer</span>&lt;<span style=\"color: #4ec9b0;\">Product</span>&gt;(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">ctx</span>, <span style=\"color: #9cdcfe;\">product</span>, <span style=\"color: #9cdcfe;\">_</span>) =&gt;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">IconButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">product</span>.<span style=\"color: #9cdcfe;\">isFavorite</span> ? <span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">favorite</span> : <span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">favorite_border</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">color</span>: <span style=\"color: #4ec9b0;\">Theme</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #9cdcfe;\">colorScheme</span>.<span style=\"color: #9cdcfe;\">secondary</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">product</span>.<span style=\"color: #dcdcaa;\">toggleFavoriteStatus</span>();</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">trailing</span>: <span style=\"color: #4ec9b0;\">IconButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #4ec9b0;\">Icon</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">shopping_cart</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">color</span>: <span style=\"color: #4ec9b0;\">Theme</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #9cdcfe;\">colorScheme</span>.<span style=\"color: #9cdcfe;\">secondary</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {},</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">backgroundColor</span>: <span style=\"color: #4ec9b0;\">Colors</span>.<span style=\"color: #9cdcfe;\">black87</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #4ec9b0;\">Text</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">product</span>.<span style=\"color: #9cdcfe;\">title</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">textAlign</span>: <span style=\"color: #4ec9b0;\">TextAlign</span>.<span style=\"color: #4fc1ff;\">center</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">GestureDetector</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onTap</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Navigator</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #dcdcaa;\">pushNamed</span>(<span style=\"color: #4ec9b0;\">ProductDetailScreen</span>.<span style=\"color: #9cdcfe;\">routeName</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">arguments</span>: <span style=\"color: #9cdcfe;\">product</span>.<span style=\"color: #9cdcfe;\">id</span>);</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Image</span>.<span style=\"color: #dcdcaa;\">network</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">product</span>.<span style=\"color: #9cdcfe;\">imageUrl</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">fit</span>: <span style=\"color: #4ec9b0;\">BoxFit</span>.<span style=\"color: #4fc1ff;\">cover</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n</div>",
            "<p style=\"text-align: center;\">if we have 2 dart files has properties having same name:::</p>\n<p style=\"text-align: center;\">we use ( as ) or ( show )</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\">import './example/item.dart as aNewItem</p>\n<p style=\"text-align: left;\">then, in logic:: aNewItem.item</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\">or::</p>\n<p style=\"text-align: left;\">&nbsp;</p>\n<p style=\"text-align: left;\">./example/ex.dart show theItem;</p>\n<p style=\"text-align: left;\">when we use show: if both files having same name property, then we tell dart to take from the other file which we added show to it, only the named property:</p>\n<p style=\"text-align: left;\">show propertyName</p>\n<p style=\"text-align: left;\">then, no confilct happes</p>",
            "<p style=\"text-align: center;\">SnackBar:</p>\n<ol>\n<li>it is useful when we have an eventHandling, so after the action we show a snack bar, same to popupmessage&nbsp;</li>\n<li>ex: onPressed(){&nbsp;&nbsp;\n<ol>\n<li>addItems();</li>\n<li>ScaffoldMessanger.of(context).showSnackBar(SnackBar)</li>\n<li>}</li>\n</ol>\n</li>\n<li>if user click on a button more than once, so it is preffered to hide the previos snackBar ex:\n<ol>\n<li>ScaffoldMessanger.of(context).hideCurrentSnackBar();</li>\n<li>then, ScaffoldMessanger.of(context).showSnackBar();</li>\n</ol>\n</li>\n</ol>"
          ]
        },
        {
          "name": "realtime firebase db with flutter",
          "data": [
            "<p>needed packege http: install and import 'package:http/http.dart' as http;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:flutter/material.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:provider/provider.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:shop/providers/product.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'../providers/products.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">EditProductScreen</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">StatefulWidget</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">static</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #9cdcfe;\">routeName</span> = <span style=\"color: #ce9178;\">'/edit-user-product'</span>;</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">EditProductScreen</span>({<span style=\"color: #569cd6;\">super</span>.<span style=\"color: #9cdcfe;\">key</span>});</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">EditProductScreen</span>&gt; <span style=\"color: #dcdcaa;\">createState</span>() =&gt; <span style=\"color: #4ec9b0;\">_EditProductScreenState</span>();</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">_EditProductScreenState</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">EditProductScreen</span>&gt; {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">late</span> <span style=\"color: #4ec9b0;\">FocusNode</span> <span style=\"color: #9cdcfe;\">priceFocusNode</span>;</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">late</span> <span style=\"color: #4ec9b0;\">FocusNode</span> <span style=\"color: #9cdcfe;\">descriptionFocusNode</span>;</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">late</span> <span style=\"color: #4ec9b0;\">FocusNode</span> <span style=\"color: #9cdcfe;\">imageFocusNode</span>;</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">final</span> <span style=\"color: #9cdcfe;\">_form</span> = <span style=\"color: #4ec9b0;\">GlobalKey</span>&lt;<span style=\"color: #4ec9b0;\">FormState</span>&gt;();</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">dynamic</span> <span style=\"color: #9cdcfe;\">editProduct</span> = {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #6a9955;\">//for save</span></div>\n<div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">'id'</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">'title'</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">'price'</span>: <span style=\"color: #b5cea8;\">0.0</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">'description'</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #ce9178;\">'imageUrl'</span>: <span style=\"color: #ce9178;\">''</span></div>\n<div>&nbsp; };</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">editProductbyId</span> = <span style=\"color: #4ec9b0;\">Product</span>(</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">id</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">description</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">price</span>: <span style=\"color: #b5cea8;\">0</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrl</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; );</div>\n<br />\n<div>&nbsp; <span style=\"color: #4ec9b0;\">bool</span> <span style=\"color: #9cdcfe;\">isInit</span> = <span style=\"color: #569cd6;\">true</span>;</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">bool</span> <span style=\"color: #9cdcfe;\">isFav</span> = <span style=\"color: #569cd6;\">false</span>;</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">bool</span> <span style=\"color: #9cdcfe;\">isLoading</span> = <span style=\"color: #569cd6;\">false</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">final</span> <span style=\"color: #9cdcfe;\">imageUrlController</span> = <span style=\"color: #4ec9b0;\">TextEditingController</span>();</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">initState</span>() {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">super</span>.<span style=\"color: #dcdcaa;\">initState</span>();</div>\n<br />\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">priceFocusNode</span> = <span style=\"color: #4ec9b0;\">FocusNode</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">descriptionFocusNode</span> = <span style=\"color: #4ec9b0;\">FocusNode</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageFocusNode</span> = <span style=\"color: #4ec9b0;\">FocusNode</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageFocusNode</span>.<span style=\"color: #dcdcaa;\">addListener</span>(<span style=\"color: #dcdcaa;\">_updateImageUrl</span>);</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">didChangeDependencies</span>() {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">super</span>.<span style=\"color: #dcdcaa;\">didChangeDependencies</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">isInit</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">final</span> <span style=\"color: #9cdcfe;\">productId</span> = <span style=\"color: #4ec9b0;\">ModalRoute</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>)!.<span style=\"color: #9cdcfe;\">settings</span>.<span style=\"color: #9cdcfe;\">arguments</span> <span style=\"color: #569cd6;\">as</span> <span style=\"color: #4ec9b0;\">dynamic</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">productId</span> != <span style=\"color: #569cd6;\">null</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">handler</span> =</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Products</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>).<span style=\"color: #dcdcaa;\">findById</span>(<span style=\"color: #9cdcfe;\">productId</span>);</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'id'</span>] = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">id</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'title'</span>] = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">title</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'price'</span>] = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">price</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'description'</span>] = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">description</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'imageUrl'</span>] = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">imageUrl</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span> = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">imageUrl</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">isFav</span> = <span style=\"color: #9cdcfe;\">handler</span>.<span style=\"color: #9cdcfe;\">isFavorite</span>;</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">isInit</span> = <span style=\"color: #569cd6;\">false</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">dispose</span>() {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageFocusNode</span>.<span style=\"color: #dcdcaa;\">removeListener</span>(<span style=\"color: #dcdcaa;\">_updateImageUrl</span>);</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">priceFocusNode</span>.<span style=\"color: #dcdcaa;\">dispose</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">descriptionFocusNode</span>.<span style=\"color: #dcdcaa;\">dispose</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #dcdcaa;\">dispose</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageFocusNode</span>.<span style=\"color: #dcdcaa;\">dispose</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">super</span>.<span style=\"color: #dcdcaa;\">dispose</span>();</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">_updateImageUrl</span>() {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #9cdcfe;\">imageFocusNode</span>.<span style=\"color: #9cdcfe;\">hasFocus</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">startsWith</span>(<span style=\"color: #ce9178;\">'http'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">startsWith</span>(<span style=\"color: #ce9178;\">'https'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.png'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.jpg'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.jpeg'</span>)) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {});</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Future</span>&lt;<span style=\"color: #569cd6;\">void</span>&gt; <span style=\"color: #dcdcaa;\">_saveForm</span>() <span style=\"color: #c586c0;\">async</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">final</span> <span style=\"color: #9cdcfe;\">isValidated</span> = <span style=\"color: #9cdcfe;\">_form</span>.<span style=\"color: #9cdcfe;\">currentState</span>!.<span style=\"color: #dcdcaa;\">validate</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #9cdcfe;\">isValidated</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span>;</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">_form</span>.<span style=\"color: #9cdcfe;\">currentState</span>!.<span style=\"color: #dcdcaa;\">save</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'id'</span>] != <span style=\"color: #ce9178;\">''</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Products</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>).<span style=\"color: #dcdcaa;\">updateProduct</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'id'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Product</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">id</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'id'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'title'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">description</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'description'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">price</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'price'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrl</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'imageUrl'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">isFavorite</span>: <span style=\"color: #9cdcfe;\">isFav</span>, <span style=\"color: #6a9955;\">//editProduct.</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ));</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Navigator</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #dcdcaa;\">pop</span>();</div>\n<div>&nbsp; &nbsp; } <span style=\"color: #c586c0;\">else</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">isLoading</span> = <span style=\"color: #569cd6;\">true</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; });</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">try</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">await</span> <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Products</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>).<span style=\"color: #dcdcaa;\">addProduct</span>(<span style=\"color: #4ec9b0;\">Product</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">id</span>: <span style=\"color: #ce9178;\">''</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'title'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">description</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'description'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">price</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'price'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrl</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'imageUrl'</span>]));</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">catch</span> (<span style=\"color: #9cdcfe;\">error</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">showDialog</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">context</span>: <span style=\"color: #9cdcfe;\">context</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">ctx</span>) =&gt; <span style=\"color: #4ec9b0;\">AlertDialog</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'An error'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">content</span>: <span style=\"color: #4ec9b0;\">Text</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">error</span>.<span style=\"color: #dcdcaa;\">toString</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">actions</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">ElevatedButton</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onPressed</span>: () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Navigator</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #dcdcaa;\">pop</span>();</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'ok'</span>))</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ));</div>\n<div>&nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">finally</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setState</span>(() {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">isLoading</span> = <span style=\"color: #569cd6;\">false</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Navigator</span>.<span style=\"color: #dcdcaa;\">of</span>(<span style=\"color: #9cdcfe;\">context</span>).<span style=\"color: #dcdcaa;\">pop</span>();</div>\n<div>&nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Widget</span> <span style=\"color: #dcdcaa;\">build</span>(<span style=\"color: #4ec9b0;\">BuildContext</span> <span style=\"color: #9cdcfe;\">context</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Scaffold</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">appBar</span>: <span style=\"color: #4ec9b0;\">AppBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'Edit Product'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">actions</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">IconButton</span>(<span style=\"color: #9cdcfe;\">onPressed</span>: <span style=\"color: #dcdcaa;\">_saveForm</span>, <span style=\"color: #9cdcfe;\">icon</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Icon</span>(<span style=\"color: #4ec9b0;\">Icons</span>.<span style=\"color: #9cdcfe;\">save</span>))</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span>: <span style=\"color: #9cdcfe;\">isLoading</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">CircularProgressIndicator</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #4ec9b0;\">Padding</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">padding</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">EdgeInsets</span>.<span style=\"color: #dcdcaa;\">all</span>(<span style=\"color: #b5cea8;\">15.0</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Form</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">key</span>: <span style=\"color: #9cdcfe;\">_form</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">ListView</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">children</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">TextFormField</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">initialValue</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'title'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">decoration</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">InputDecoration</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">labelText</span>: <span style=\"color: #ce9178;\">'Title'</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">border</span>: <span style=\"color: #4ec9b0;\">OutlineInputBorder</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">hintText</span>: <span style=\"color: #ce9178;\">'Enter a search term'</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">textInputAction</span>: <span style=\"color: #4ec9b0;\">TextInputAction</span>.<span style=\"color: #4fc1ff;\">next</span>, <span style=\"color: #6a9955;\">//next in keyboard</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onFieldSubmitted</span>: ((<span style=\"color: #9cdcfe;\">value</span>) =&gt;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">priceFocusNode</span>.<span style=\"color: #dcdcaa;\">requestFocus</span>()),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onSaved</span>: (<span style=\"color: #9cdcfe;\">newValue</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'title'</span>] = <span style=\"color: #9cdcfe;\">newValue</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">validator</span>: ((<span style=\"color: #9cdcfe;\">value</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>!.<span style=\"color: #9cdcfe;\">isEmpty</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please provide a value'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">null</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">TextFormField</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">initialValue</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'price'</span>].<span style=\"color: #dcdcaa;\">toString</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">decoration</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">InputDecoration</span>(<span style=\"color: #9cdcfe;\">labelText</span>: <span style=\"color: #ce9178;\">'Price'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">textInputAction</span>: <span style=\"color: #4ec9b0;\">TextInputAction</span>.<span style=\"color: #4fc1ff;\">next</span>, <span style=\"color: #6a9955;\">//next in keyboard</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">keyboardType</span>: <span style=\"color: #4ec9b0;\">TextInputType</span>.<span style=\"color: #9cdcfe;\">number</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">focusNode</span>: <span style=\"color: #9cdcfe;\">priceFocusNode</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onFieldSubmitted</span>: ((<span style=\"color: #9cdcfe;\">value</span>) =&gt;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">descriptionFocusNode</span>.<span style=\"color: #dcdcaa;\">requestFocus</span>()),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onSaved</span>: (<span style=\"color: #9cdcfe;\">newValue</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'price'</span>] = <span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #dcdcaa;\">parse</span>(<span style=\"color: #9cdcfe;\">newValue</span>!);</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">validator</span>: ((<span style=\"color: #9cdcfe;\">value</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>!.<span style=\"color: #9cdcfe;\">isEmpty</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please enter a price'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #dcdcaa;\">tryParse</span>(<span style=\"color: #9cdcfe;\">value</span>) == <span style=\"color: #569cd6;\">null</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'enter a valid number'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #4ec9b0;\">double</span>.<span style=\"color: #dcdcaa;\">parse</span>(<span style=\"color: #9cdcfe;\">value</span>) &lt;= <span style=\"color: #b5cea8;\">0</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please provide a number greater than 0'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">null</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">TextFormField</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">initialValue</span>: <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'description'</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">decoration</span>:</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">InputDecoration</span>(<span style=\"color: #9cdcfe;\">labelText</span>: <span style=\"color: #ce9178;\">'Desciption'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">maxLines</span>: <span style=\"color: #b5cea8;\">3</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">textInputAction</span>: <span style=\"color: #4ec9b0;\">TextInputAction</span>.<span style=\"color: #4fc1ff;\">newline</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">focusNode</span>: <span style=\"color: #9cdcfe;\">descriptionFocusNode</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onSaved</span>: (<span style=\"color: #9cdcfe;\">newValue</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'description'</span>] = <span style=\"color: #9cdcfe;\">newValue</span>!;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">validator</span>: ((<span style=\"color: #9cdcfe;\">value</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>!.<span style=\"color: #9cdcfe;\">isEmpty</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please enter a price'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #9cdcfe;\">length</span> &lt; <span style=\"color: #b5cea8;\">3</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'min 10'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">null</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Row</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">crossAxisAlignment</span>: <span style=\"color: #4ec9b0;\">CrossAxisAlignment</span>.<span style=\"color: #4fc1ff;\">end</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">children</span>: [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Container</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">width</span>: <span style=\"color: #b5cea8;\">100</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">height</span>: <span style=\"color: #b5cea8;\">100</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">margin</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">EdgeInsets</span>.<span style=\"color: #dcdcaa;\">only</span>(<span style=\"color: #9cdcfe;\">top</span>: <span style=\"color: #b5cea8;\">8</span>, <span style=\"color: #9cdcfe;\">right</span>: <span style=\"color: #b5cea8;\">10</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">decoration</span>: <span style=\"color: #4ec9b0;\">BoxDecoration</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">border</span>: <span style=\"color: #4ec9b0;\">Border</span>.<span style=\"color: #dcdcaa;\">all</span>(<span style=\"color: #9cdcfe;\">width</span>: <span style=\"color: #b5cea8;\">1</span>, <span style=\"color: #9cdcfe;\">color</span>: <span style=\"color: #4ec9b0;\">Colors</span>.<span style=\"color: #9cdcfe;\">grey</span>)),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #9cdcfe;\">isEmpty</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'Enter a URL'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #4ec9b0;\">FittedBox</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Image</span>.<span style=\"color: #dcdcaa;\">network</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">imageUrlController</span>.<span style=\"color: #9cdcfe;\">text</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">fit</span>: <span style=\"color: #4ec9b0;\">BoxFit</span>.<span style=\"color: #4fc1ff;\">cover</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Expanded</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">TextFormField</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">decoration</span>:</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">InputDecoration</span>(<span style=\"color: #9cdcfe;\">labelText</span>: <span style=\"color: #ce9178;\">'Image URL'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">keyboardType</span>: <span style=\"color: #4ec9b0;\">TextInputType</span>.<span style=\"color: #9cdcfe;\">url</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">textInputAction</span>: <span style=\"color: #4ec9b0;\">TextInputAction</span>.<span style=\"color: #4fc1ff;\">done</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">controller</span>: <span style=\"color: #9cdcfe;\">imageUrlController</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">focusNode</span>: <span style=\"color: #9cdcfe;\">imageFocusNode</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onFieldSubmitted</span>: (<span style=\"color: #9cdcfe;\">_</span>) =&gt; <span style=\"color: #dcdcaa;\">_saveForm</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">onSaved</span>: (<span style=\"color: #9cdcfe;\">newValue</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">editProduct</span>[<span style=\"color: #ce9178;\">'imageUrl'</span>] = <span style=\"color: #9cdcfe;\">newValue</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">validator</span>: ((<span style=\"color: #9cdcfe;\">value</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>!.<span style=\"color: #9cdcfe;\">isEmpty</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please enter a image url'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">startsWith</span>(<span style=\"color: #ce9178;\">'http'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">startsWith</span>(<span style=\"color: #ce9178;\">'https'</span>)) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please enter a valid url'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.png'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.jpg'</span>) &amp;&amp;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">endsWith</span>(<span style=\"color: #ce9178;\">'.jpeg'</span>)) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #ce9178;\">'please ente a valid image'</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">null</span>;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n<br /><br /><br />\n<div><span style=\"color: #6a9955;\">// import 'package:flutter/material.dart';</span></div>\n<div><span style=\"color: #6a9955;\">// import 'package:provider/provider.dart';</span></div>\n<div><span style=\"color: #6a9955;\">// import 'package:shop/providers/product.dart';</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// import '../providers/products.dart';</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// class EditProductScreen extends StatefulWidget {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; static const routeName = '/edit-user-product';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; const EditProductScreen({super.key});</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; @override</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; State&lt;EditProductScreen&gt; createState() =&gt; _EditProductScreenState();</span></div>\n<div><span style=\"color: #6a9955;\">// }</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// class _EditProductScreenState extends State&lt;EditProductScreen&gt; {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; late FocusNode priceFocusNode;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; late FocusNode descriptionFocusNode;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; late FocusNode imageFocusNode;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; final _form = GlobalKey&lt;FormState&gt;();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; var editProduct = Product(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; id: '',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; title: '',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; price: 0.0,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; description: '',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageUrl: '',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; );</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; final imageUrlController = TextEditingController();</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; @override</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; void initState() {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; super.initState();</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; priceFocusNode = FocusNode();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; descriptionFocusNode = FocusNode();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageFocusNode = FocusNode();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageFocusNode.addListener(_updateImageUrl);</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; }</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; @override</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; void dispose() {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageFocusNode.removeListener(_updateImageUrl);</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; priceFocusNode.dispose();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; descriptionFocusNode.dispose();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageUrlController.dispose();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; imageFocusNode.dispose();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; super.dispose();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; }</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; void _updateImageUrl() {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; if (!imageFocusNode.hasFocus) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; if (!imageUrlController.text.startsWith('http') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !imageUrlController.text.startsWith('https') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !imageUrlController.text.endsWith('.png') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !imageUrlController.text.endsWith('.jpg') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !imageUrlController.text.endsWith('.jpeg')) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; return;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; setState(() {});</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; }</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; void _saveForm() {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; final isValidated = _form.currentState!.validate();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; if (!isValidated) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; return;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; _form.currentState!.save();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; Provider.of&lt;Products&gt;(context, listen: false).addProduct(editProduct);</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; Navigator.of(context).pop();</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; }</span></div>\n<br />\n<div><span style=\"color: #6a9955;\">// &nbsp; @override</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; Widget build(BuildContext context) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; return Scaffold(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; appBar: AppBar(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; title: const Text('Edit Product'),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; actions: [</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; IconButton(onPressed: _saveForm, icon: const Icon(Icons.save))</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; ],</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; body: Padding(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; padding: const EdgeInsets.all(15.0),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; child: Form(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; key: _form,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; child: ListView(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; children: [</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TextFormField(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: const InputDecoration(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; labelText: 'Title',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; border: OutlineInputBorder(),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; hintText: 'Enter a search term',</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; textInputAction: TextInputAction.next, //next in keyboard</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onFieldSubmitted: ((value) =&gt; priceFocusNode.requestFocus()),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onSaved: (newValue) =&gt; Product(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: editProduct.id,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: newValue!,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description: editProduct.description,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; price: editProduct.price,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; imageUrl: editProduct.imageUrl,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validator: ((value) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (value!.isEmpty) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please provide a value';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return null;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TextFormField(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: const InputDecoration(labelText: 'Price'),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; textInputAction: TextInputAction.next, //next in keyboard</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keyboardType: TextInputType.number,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; focusNode: priceFocusNode,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onFieldSubmitted: ((value) =&gt;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; descriptionFocusNode.requestFocus()),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onSaved: (newValue) =&gt; Product(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: editProduct.id,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: editProduct.title,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description: editProduct.description,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; price: double.parse(newValue!),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; imageUrl: editProduct.imageUrl,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validator: ((value) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (value!.isEmpty) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please enter a price';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (double.tryParse(value) == null) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'enter a valid number';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (double.parse(value) &lt;= 0) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please provide a number greater than 0';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return null;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; TextFormField(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: const InputDecoration(labelText: 'Desciption'),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; maxLines: 3,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; textInputAction: TextInputAction.newline,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; focusNode: descriptionFocusNode,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onSaved: (newValue) =&gt; Product(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: editProduct.id,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: editProduct.title,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description: newValue!,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; price: editProduct.price,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; imageUrl: editProduct.imageUrl,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validator: ((value) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (value!.isEmpty) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please enter a price';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (value.length &lt; 3) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'min 10';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return null;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Row(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; crossAxisAlignment: CrossAxisAlignment.end,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; children: [</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Container(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; width: 100,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; height: 100,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; margin: const EdgeInsets.only(top: 8, right: 10),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: BoxDecoration(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; border: Border.all(width: 1, color: Colors.grey)),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; child: imageUrlController.text.isEmpty</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? const Text('Enter a URL')</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : FittedBox(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; child: Image.network(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; imageUrlController.text,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fit: BoxFit.cover,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Expanded(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; child: TextFormField(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; decoration: const InputDecoration(labelText: 'Image URL'),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; keyboardType: TextInputType.url,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; textInputAction: TextInputAction.done,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; controller: imageUrlController,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; focusNode: imageFocusNode,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onFieldSubmitted: (_) =&gt; _saveForm(),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; onSaved: (newValue) =&gt; Product(</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; id: editProduct.id,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; title: editProduct.title,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; description: editProduct.description,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; price: editProduct.price,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; imageUrl: newValue!,</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; validator: ((value) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (value!.isEmpty) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please enter a image url';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!value.startsWith('http') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !value.startsWith('https')) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please enter a valid url';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if (!value.endsWith('.png') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !value.endsWith('.jpg') &amp;&amp;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; !value.endsWith('.jpeg')) {</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return 'please ente a valid image';</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; return null;</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ],</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; &nbsp; ),</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; &nbsp; );</span></div>\n<div><span style=\"color: #6a9955;\">// &nbsp; }</span></div>\n<div><span style=\"color: #6a9955;\">// }</span></div>\n</div>",
            "<p style=\"text-align: center;\">Future Bulder with stateless widget:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div>\n<div style=\"line-height: 19px;\">\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:flutter/material.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:provider/provider.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:shop/widgets/app_drawer.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'../providers/orders.dart'</span> <span style=\"color: #569cd6;\">show</span> <span style=\"color: #4ec9b0;\">Orders</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'../widgets/order_item.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">OrdersScreen</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">StatelessWidget</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">static</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #9cdcfe;\">routeName</span> = <span style=\"color: #ce9178;\">'/orders-screen'</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">OrdersScreen</span>({<span style=\"color: #569cd6;\">super</span>.<span style=\"color: #9cdcfe;\">key</span>});</div>\n<br />\n<div>&nbsp; <span style=\"color: #6a9955;\">// @override</span></div>\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Widget</span> <span style=\"color: #dcdcaa;\">build</span>(<span style=\"color: #4ec9b0;\">BuildContext</span> <span style=\"color: #9cdcfe;\">context</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #6a9955;\">// final orderData = Provider.of&lt;Orders&gt;(context);</span></div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Scaffold</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">appBar</span>: <span style=\"color: #4ec9b0;\">AppBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'Your orders'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">drawer</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">AppDrawer</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span>: <span style=\"color: #4ec9b0;\">FutureBuilder</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">future</span>: <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Orders</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>).<span style=\"color: #dcdcaa;\">fetchAndSetOrders</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">dataSnapshot</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">dataSnapshot</span>.<span style=\"color: #9cdcfe;\">connectionState</span> == <span style=\"color: #4ec9b0;\">ConnectionState</span>.<span style=\"color: #4fc1ff;\">waiting</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(<span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">CircularProgressIndicator</span>());</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">else</span> <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">dataSnapshot</span>.<span style=\"color: #9cdcfe;\">error</span> != <span style=\"color: #569cd6;\">null</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">\"An error occured!\"</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">else</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Consumer</span>&lt;<span style=\"color: #4ec9b0;\">Orders</span>&gt;(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">orderData</span>, <span style=\"color: #9cdcfe;\">child</span>) =&gt;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>.<span style=\"color: #9cdcfe;\">isNotEmpty</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #4ec9b0;\">ListView</span>.<span style=\"color: #dcdcaa;\">builder</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">itemCount</span>: <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>.<span style=\"color: #9cdcfe;\">length</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">itemBuilder</span>: (<span style=\"color: #9cdcfe;\">ctx</span>, <span style=\"color: #9cdcfe;\">index</span>) =&gt; <span style=\"color: #4ec9b0;\">OrderItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>[<span style=\"color: #9cdcfe;\">index</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'No Data were found!'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n</div>\n</div>\n</div>",
            "<p style=\"text-align: center;\">Future Builder with stateful: since we dont want to call data every time our widget rebuilds</p>\n<p style=\"text-align: center;\">to it is better to use this approach:</p>\n<p style=\"text-align: center;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:flutter/material.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:provider/provider.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'package:shop/widgets/app_drawer.dart'</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'../providers/orders.dart'</span> <span style=\"color: #569cd6;\">show</span> <span style=\"color: #4ec9b0;\">Orders</span>;</div>\n<div><span style=\"color: #569cd6;\">import</span> <span style=\"color: #ce9178;\">'../widgets/order_item.dart'</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">OrdersScreen</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">StatefulWidget</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">static</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #9cdcfe;\">routeName</span> = <span style=\"color: #ce9178;\">'/orders-screen'</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">OrdersScreen</span>({<span style=\"color: #569cd6;\">super</span>.<span style=\"color: #9cdcfe;\">key</span>});</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">OrdersScreen</span>&gt; <span style=\"color: #dcdcaa;\">createState</span>() =&gt; <span style=\"color: #4ec9b0;\">_OrdersScreenState</span>();</div>\n<div>}</div>\n<br />\n<div><span style=\"color: #569cd6;\">class</span> <span style=\"color: #4ec9b0;\">_OrdersScreenState</span> <span style=\"color: #569cd6;\">extends</span> <span style=\"color: #4ec9b0;\">State</span>&lt;<span style=\"color: #4ec9b0;\">OrdersScreen</span>&gt; {</div>\n<div>&nbsp;</div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Future</span>? <span style=\"color: #9cdcfe;\">_odersFuture</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Future</span> <span style=\"color: #dcdcaa;\">_obtainFuture</span>(){</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Provider</span>.<span style=\"color: #dcdcaa;\">of</span>&lt;<span style=\"color: #4ec9b0;\">Orders</span>&gt;(<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">listen</span>: <span style=\"color: #569cd6;\">false</span>).<span style=\"color: #dcdcaa;\">fetchAndSetOrders</span>();</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">void</span> <span style=\"color: #dcdcaa;\">initState</span>() {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">_odersFuture</span> = <span style=\"color: #dcdcaa;\">_obtainFuture</span>();</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">super</span>.<span style=\"color: #dcdcaa;\">initState</span>();</div>\n<div>&nbsp; }</div>\n<div>&nbsp; <span style=\"color: #6a9955;\">// @override</span></div>\n<div>&nbsp; <span style=\"color: #9cdcfe;\">@</span><span style=\"color: #9cdcfe;\">override</span></div>\n<div>&nbsp; <span style=\"color: #4ec9b0;\">Widget</span> <span style=\"color: #dcdcaa;\">build</span>(<span style=\"color: #4ec9b0;\">BuildContext</span> <span style=\"color: #9cdcfe;\">context</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #6a9955;\">// final orderData = Provider.of&lt;Orders&gt;(context);</span></div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Scaffold</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">appBar</span>: <span style=\"color: #4ec9b0;\">AppBar</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">title</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'Your orders'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">drawer</span>: <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">AppDrawer</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span>: <span style=\"color: #4ec9b0;\">FutureBuilder</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">future</span>: <span style=\"color: #9cdcfe;\">_odersFuture</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">dataSnapshot</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">dataSnapshot</span>.<span style=\"color: #9cdcfe;\">connectionState</span> == <span style=\"color: #4ec9b0;\">ConnectionState</span>.<span style=\"color: #4fc1ff;\">waiting</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(<span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">CircularProgressIndicator</span>());</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">else</span> <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">dataSnapshot</span>.<span style=\"color: #9cdcfe;\">error</span> != <span style=\"color: #569cd6;\">null</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">\"An error occured!\"</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; } <span style=\"color: #c586c0;\">else</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4ec9b0;\">Consumer</span>&lt;<span style=\"color: #4ec9b0;\">Orders</span>&gt;(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">builder</span>: (<span style=\"color: #9cdcfe;\">context</span>, <span style=\"color: #9cdcfe;\">orderData</span>, <span style=\"color: #9cdcfe;\">child</span>) =&gt;</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>.<span style=\"color: #9cdcfe;\">isNotEmpty</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #4ec9b0;\">ListView</span>.<span style=\"color: #dcdcaa;\">builder</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">itemCount</span>: <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>.<span style=\"color: #9cdcfe;\">length</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">itemBuilder</span>: (<span style=\"color: #9cdcfe;\">ctx</span>, <span style=\"color: #9cdcfe;\">index</span>) =&gt; <span style=\"color: #4ec9b0;\">OrderItem</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">orderData</span>.<span style=\"color: #9cdcfe;\">orders</span>[<span style=\"color: #9cdcfe;\">index</span>],</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; )</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4ec9b0;\">Center</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">child</span>: <span style=\"color: #4ec9b0;\">Text</span>(<span style=\"color: #ce9178;\">'No Data were found!'</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; );</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>}</div>\n</div>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "9/27/2022",
      "depricate": [
        [],
        [],
        [],
        [],
        []
      ]
    },
    {
      "id": 4,
      "projectId": 4,
      "todo": [
        {
          "name": "Packages",
          "data": [
            "<p><span style=\"color: #ffffff;\"><span style=\"color: #ba372a;\"><span style=\"font-size: 24px;\"><strong>packages source: https://www.youtube.com/playlist?list=PLrOp29ATDP7ZCWE2q8RQLqjuPef0V3L19</strong></span></span></span></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18pt;\"><span style=\"color: #ba372a;\">v-calendar</span>:&nbsp; &nbsp;https://vcalendar.io/</span></strong></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18pt;\"><span style=\"color: #ba372a;\">echarts:</span>&nbsp; &nbsp; https://echarts.apache.org/handbook/en/basics/import</span></strong></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18pt;\"><strong><span style=\"color: #ba372a;\">swiper</span>:&nbsp;&nbsp;https://swiperjs.com/vue</strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18pt;\"><span style=\"color: #ffffff; background-color: #e67e23;\"><strong>carousel image gallery tutorial</strong>:</span><strong> https://www.youtube.com/watch?v=QN2tCu2vE3I&amp;list=PLrOp29ATDP7ZCWE2q8RQLqjuPef0V3L19&amp;index=6</strong></span></p>\n<p>&nbsp;</p>\n<p><span style=\"background-color: #e67e23; color: #ffffff;\"><strong><span style=\"font-size: 18pt; background-color: #e67e23;\">Full Calendar:</span></strong></span><strong><span style=\"font-size: 18pt;\"> https://fullcalendar.io/docs/vue</span></strong></p>\n<p>&nbsp;</p>\n<p><strong><span style=\"font-size: 18pt;\">ArtPlayer(video player):&nbsp;</span></strong><span style=\"font-size: 24px;\"><strong>https://artplayer.org/document/</strong></span></p>\n<p style=\"padding-left: 280px;\"><span style=\"font-size: 24px;\"><strong>https://www.youtube.com/watch?v=sM9_RWfARvI&amp;list=PLrOp29ATDP7ZCWE2q8RQLqjuPef0V3L19&amp;index=12</strong></span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 18pt;\"><span style=\"background-color: #e03e2d; color: #ffffff;\"><strong>Draggable Elements:</strong></span> https://www.youtube.com/watch?v=UyEoG3wRxdc&amp;list=PLrOp29ATDP7ZCWE2q8RQLqjuPef0V3L19&amp;index=16</span></p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>"
          ]
        },
        {
          "name": "Translation, i81n vue",
          "data": [
            "<p>&nbsp;</p>\n<ol>\n<li>https://kazupon.github.io/vue-i18n/guide/formatting.html#list-formatting\n<ol>\n<li style=\"text-align: left;\">currently used package</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>https://www.youtube.com/watch?v=zJBxAx_xPqM\n<ol>\n<li>get tranlation from server tut, used</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>https://www.youtube.com/watch?v=oyjc7dY7hFM\n<ol>\n<li>general overview how to start up with i18n, but it is vue 2</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>https://levelup.gitconnected.com/how-to-build-a-multi-language-vue-3-vite-app-b91c34c46097\n<ol>\n<li>most useful, step with step with vite configuration</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>https://stackoverflow.com/questions/72547216/vue3-internationalization-with-i18n-and-script-setup-vite\n<ol>\n<li>useful: get some ideas</li>\n</ol>\n</li>\n</ol>\n<p>&nbsp;</p>\n<ol>\n<li>https://laracasts.com/discuss/channels/laravel/how-to-use-laravel-localization-on-database-fetched-records\n<ol>\n<li>useful,, but for laravel, good to read, laravel localization, laravel translation many tables, multiple tables</li>\n</ol>\n</li>\n</ol>",
            "<ol>\n<li>install package:&nbsp;<span style=\"background-color: #292d3e; color: #a6accd; font-family: Menlo, Monaco, Consolas, 'Courier New', monospace; white-space: pre;\">npm install vue-i18n@9</span></li>\n<li><span style=\"color: #292929; font-family: Menlo, Monaco, 'Courier New', Courier, monospace; font-size: 16px; letter-spacing: -0.352px; white-space: pre-wrap; background-color: #f2f2f2;\">npm install <span style=\"color: #ba372a; background-color: #7e8c8d;\">@intlify/unplugin-vue-i18n</span></span></li>\n<li>// scond package is used to pre-compile messages(en,json, ar.json) directly in vite.config.js instead of putting them in main.js</li>\n</ol>\n<p>&nbsp;</p>\n<p style=\"padding-left: 40px;\">then, in vite.config.js</p>\n<p style=\"padding-left: 40px;\">add these imports</p>\n<p style=\"padding-left: 40px;\">import { fileURLToPath, URL } from \"node:url\";</p>\n<p style=\"padding-left: 40px;\">import { resolve, dirname } from \"node:path\";</p>\n<p style=\"padding-left: 40px;\">import VueI18nPlugin from \"@intlify/unplugin-vue-i18n/vite\";</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">then the file should look like:</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">fileURLToPath</span>, <span style=\"color: #9cdcfe;\">URL</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"node:url\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">resolve</span>, <span style=\"color: #9cdcfe;\">dirname</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"node:path\"</span>;</div>\n<br />\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">defineConfig</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"vite\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">vue</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"@vitejs/plugin-vue\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">svgLoader</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"vite-svg-loader\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">VueI18nPlugin</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"@intlify/unplugin-vue-i18n/vite\"</span>;</div>\n<br />\n<div><span style=\"color: #6a9955;\">// https://vitejs.dev/config/</span></div>\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #c586c0;\">default</span> <span style=\"color: #dcdcaa;\">defineConfig</span>({</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">plugins</span><span style=\"color: #9cdcfe;\">:</span> [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">vue</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">svgLoader</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">VueI18nPlugin</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">include</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #dcdcaa;\">resolve</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">dirname</span>(<span style=\"color: #dcdcaa;\">fileURLToPath</span>(<span style=\"color: #c586c0;\">import</span>.<span style=\"color: #9cdcfe;\">meta</span>.<span style=\"color: #9cdcfe;\">url</span>)),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"./src/locales/**\"</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; }),</div>\n<div>&nbsp; &nbsp; ],</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">resolve</span><span style=\"color: #9cdcfe;\">:</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">alias</span><span style=\"color: #9cdcfe;\">:</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">\"@\"</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #dcdcaa;\">fileURLToPath</span>(<span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">URL</span>(<span style=\"color: #ce9178;\">\"./src\"</span>, <span style=\"color: #c586c0;\">import</span>.<span style=\"color: #9cdcfe;\">meta</span>.<span style=\"color: #9cdcfe;\">url</span>)),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; },</div>\n<div>});</div>\n</div>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p>&nbsp;</p>",
            "<p>in some cases, we may need to change axios, to have header language, to deal with db, we can get the lang from the localeStorage</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\"><span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">lang</span> = <span style=\"color: #9cdcfe;\">localStorage</span>.<span style=\"color: #dcdcaa;\">getItem</span>(<span style=\"color: #ce9178;\">\"lang\"</span>) || <span style=\"color: #ce9178;\">'English'</span>;</div>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">&nbsp;</div>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">but this way needs to restart the page</div>",
            "<p>in some other cases: when we want to setLocaleStorage('lang', 'eng');</p>\n<p>we must put the a promise first, to chang the value, then the promise return the value we lastly add .then(val =&gt; setLocalStroage('lang', val);</p>",
            "<p>then in main.js:</p>\n<p style=\"padding-left: 40px;\">import { createI18n } from \"vue-i18n\";</p>\n<p style=\"padding-left: 40px;\">import messages from \"@intlify/unplugin-vue-i18n/messages\";&nbsp; //pre-compile messages (the files that contains translations)</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">i18n</span> = <span style=\"color: #dcdcaa;\">createI18n</span>({</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">legacy</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #569cd6;\">false</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">globalInjection</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #569cd6;\">true</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">locale</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">localStorage</span>.<span style=\"color: #dcdcaa;\">getItem</span>(<span style=\"color: #ce9178;\">\"lang\"</span>) ///can be directy \"English\" or \"en\" depends on how we use it</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #9cdcfe;\">localStorage</span>.<span style=\"color: #dcdcaa;\">getItem</span>(<span style=\"color: #ce9178;\">\"lang\"</span>).<span style=\"color: #dcdcaa;\">toLowerCase</span>()</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #ce9178;\">\"english\"</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">fallbackLocale</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">localStorage</span>.<span style=\"color: #dcdcaa;\">getItem</span>(<span style=\"color: #ce9178;\">\"lang\"</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ? <span style=\"color: #9cdcfe;\">localStorage</span>.<span style=\"color: #dcdcaa;\">getItem</span>(<span style=\"color: #ce9178;\">\"lang\"</span>).<span style=\"color: #dcdcaa;\">toLowerCase</span>()</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; : <span style=\"color: #ce9178;\">\"english\"</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">availableLocales</span><span style=\"color: #9cdcfe;\">:</span> [<span style=\"color: #ce9178;\">\"english\"</span>, <span style=\"color: #ce9178;\">\"arabic\"</span>],</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">messages</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">messages</span>,</div>\n<div>});</div>\n<div>&nbsp;</div>\n<div>\n<div style=\"line-height: 19px;\">.<span style=\"color: #dcdcaa;\">use</span>(<span style=\"color: #4fc1ff;\">i18n</span>)</div>\n</div>\n</div>",
            "<p>then, in src/&nbsp; create a folder named: locales /// it can be any name, but make sure to edit it in vite.config.js in the resolve()</p>\n<p style=\"padding-left: 40px;\">/src/locales</p>\n<p style=\"padding-left: 40px;\">then add translation files: english.json</p>\n<p style=\"padding-left: 200px;\">arabic.json</p>\n<p style=\"padding-left: 40px;\">both files must have same names&nbsp;</p>\n<p style=\"padding-left: 40px;\">{</p>\n<p style=\"padding-left: 40px;\">&nbsp; &nbsp; \"services\" : \"خدماتنا\"</p>\n<p style=\"padding-left: 40px;\">}</p>",
            "<p>to change languages: 2 ways:</p>\n<table class=\"highlight tab-size js-file-line-container js-code-nav-container js-tagsearch-file\" style=\"padding: 0px; margin: 0px; font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace; font-size: 12px; line-height: 1.4; color: #333333; border: 0px; height: 247px;\" width=\"866\" data-hpc=\"\" data-tab-size=\"8\" data-paste-markdown-skip=\"\" data-tagsearch-lang=\"Vue\" data-tagsearch-path=\"LocaleSelect.vue\">\n<tbody>\n<tr>\n<td id=\"file-localeselect-vue-LC1\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding: 4px 10px !important 1px !important 10px !important;\">&lt;<span class=\"pl-ent\" style=\"color: #22863a;\">template</span>&gt;</td>\n</tr>\n<tr>\n<td id=\"file-localeselect-vue-L2\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" style=\"position: relative; width: 14px; min-width: inherit; line-height: 20px; color: var(--color-fg-subtle); text-align: right; white-space: nowrap; vertical-align: top; cursor: pointer; user-select: none; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; padding: 1px 10px !important;\" data-line-number=\"2\"></td>\n<td id=\"file-localeselect-vue-LC2\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding: 1px 10px !important;\">&lt;<span class=\"pl-ent\" style=\"color: #22863a;\">label</span> <span class=\"pl-e\" style=\"color: #6f42c1;\">for</span>=<span class=\"pl-s\" style=\"color: #032f62;\"><span class=\"pl-pds\">\"</span>locale<span class=\"pl-pds\">\"</span></span>&gt;Locale: &lt;/<span class=\"pl-ent\" style=\"color: #22863a;\">label</span>&gt;</td>\n</tr>\n<tr>\n<td id=\"file-localeselect-vue-L3\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" style=\"position: relative; width: 14px; min-width: inherit; line-height: 20px; color: var(--color-fg-subtle); text-align: right; white-space: nowrap; vertical-align: top; cursor: pointer; user-select: none; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; padding: 1px 10px !important;\" data-line-number=\"3\"></td>\n<td id=\"file-localeselect-vue-LC3\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding: 1px !important 10px !important 1px !important 50px;\"><span style=\"color: #000000; font-size: 14pt;\">&lt;<span class=\"pl-ent\">select</span> <span class=\"pl-e\">v-model</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span><span class=\"pl-smi\">$i18n</span>.<span class=\"pl-smi\">locale</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-e\">id</span>=<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>locale<span class=\"pl-pds\">\"</span></span>&gt;</span></td>\n</tr>\n<tr>\n<td id=\"file-localeselect-vue-L4\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" style=\"position: relative; width: 14px; min-width: inherit; line-height: 20px; color: var(--color-fg-subtle); text-align: right; white-space: nowrap; vertical-align: top; cursor: pointer; user-select: none; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; padding: 1px 10px !important;\" data-line-number=\"4\"></td>\n<td id=\"file-localeselect-vue-LC4\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding: 1px !important 10px !important 1px !important 90px;\"><span style=\"color: #000000; font-size: 14pt;\">&lt;<span class=\"pl-ent\">option</span> <span class=\"pl-e\">v-for</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>locale <span class=\"pl-k\">in</span> <span class=\"pl-smi\">$i18n</span>.<span class=\"pl-smi\">availableLocales</span><span class=\"pl-pds\">\"</span></span> :<span class=\"pl-e\">value</span>=<span class=\"pl-s1\"><span class=\"pl-pds\">\"</span>locale<span class=\"pl-pds\">\"</span></span>&gt;{{ locale }}&lt;/<span class=\"pl-ent\">option</span>&gt;</span></td>\n</tr>\n<tr>\n<td id=\"file-localeselect-vue-L5\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" style=\"position: relative; width: 14px; min-width: inherit; line-height: 20px; color: var(--color-fg-subtle); text-align: right; white-space: nowrap; vertical-align: top; cursor: pointer; user-select: none; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; padding: 1px 10px !important;\" data-line-number=\"5\"></td>\n<td id=\"file-localeselect-vue-LC5\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding: 1px !important 10px !important 1px !important 50px;\"><span style=\"color: #000000; font-size: 14pt;\">&lt;/<span class=\"pl-ent\">select</span>&gt;</span></td>\n</tr>\n<tr>\n<td id=\"file-localeselect-vue-L6\" class=\"blob-num js-line-number js-code-nav-line-number js-blob-rnum\" style=\"position: relative; width: 14px; min-width: inherit; line-height: 20px; color: var(--color-fg-subtle); text-align: right; white-space: nowrap; vertical-align: top; cursor: pointer; user-select: none; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; padding: 1px 10px !important;\" data-line-number=\"6\"></td>\n<td id=\"file-localeselect-vue-LC6\" class=\"blob-code blob-code-inner js-file-line\" style=\"position: relative; line-height: 20px; vertical-align: top; overflow: visible; color: var(--color-fg-default); overflow-wrap: anywhere; white-space: pre; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; border: 0px; padding-top: 1px !important; padding-right: 10px !important; padding-bottom: 1px !important;\">&lt;/<span class=\"pl-ent\" style=\"color: #22863a;\">template</span>&gt;</td>\n</tr>\n</tbody>\n</table>",
            "<p>another way:&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">useI18n</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">'vue-i18n'</span>;</div>\n<div>&nbsp; &nbsp;</div>\n<div><span style=\"color: #569cd6;\">const</span> { <span style=\"color: #dcdcaa;\">t, locale</span> } = <span style=\"color: #dcdcaa;\">useI18n</span>();</div>\n<div>&nbsp;</div>\n<div>... then in a @click function(lang) set::: locale.value = lang;;;; this will change the language</div>\n<div>&nbsp;</div>\n</div>",
            "<p>to change language upon locale changes:</p>\n<p>&lt;p&gt;{{ $t('services') }}</p>\n<p>&nbsp;</p>\n<p>or inside &lt;script setup&gt;</p>\n<p style=\"padding-left: 40px;\">import useI18n from 'vue-i18n'</p>\n<p style=\"padding-left: 40px;\">const { t } = useI18n();</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">const x = ref('');</p>\n<p style=\"padding-left: 40px;\">x.value = t('services');</p>\n<div style=\"padding: 0px; margin: 0px; box-sizing: border-box; font-family: 'Josefin Sans', sans-serif; color: #ffffff; scroll-behavior: smooth; font-size: medium; white-space: pre;\">&nbsp;</div>",
            "<p>when w get translations from db, most use cases we send a header 'Accept-Language' to the server then in laravel&nbsp;</p>\n<p>inside the controller --&gt; get a better way to use a custom middleware, and use multiple tables for translations and use getAttributes in models to get better way</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\"><span style=\"color: #dcdcaa;\">Request</span>()-&gt;<span style=\"color: #dcdcaa;\">server</span>(<span style=\"color: #ce9178;\">'HTTP_ACCEPT_LANGUAGE'</span>);</div>",
            "<p>to detect user input language use, regex and use this function:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #6a9955;\">// detect language by name, not direction</span></div>\n<div><span style=\"color: #569cd6;\">function</span> <span style=\"color: #dcdcaa;\">lngtype</span>(<span style=\"color: #9cdcfe;\">text</span>) {</div>\n<div>  <span style=\"color: #9cdcfe;\">text</span> = <span style=\"color: #9cdcfe;\">text</span>.<span style=\"color: #dcdcaa;\">replace</span>(<span style=\"color: #d16969;\">/ </span><span style=\"color: #d7ba7d;\">+</span><span style=\"color: #d16969;\">/</span><span style=\"color: #569cd6;\">g</span>, <span style=\"color: #ce9178;\">\"\"</span>); <span style=\"color: #6a9955;\">//read input value, and remove \"space\" by replace \\s</span></div>\n<br />\n<div>  <span style=\"color: #6a9955;\">//Dictionary for Unicode range of the languages</span></div>\n<div>  <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">langdic</span> = {</div>\n<div>    <span style=\"color: #9cdcfe;\">Arabic:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0600</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u06FF</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Persian:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0750</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u077F</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Hebrew:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0590</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u05FF</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Syriac:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0700</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u074F</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Bengali:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0980</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u09FF</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Ethiopic:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u1200</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u137F</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #ce9178;\">\"Greek and Coptic\"</span><span style=\"color: #9cdcfe;\">:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0370</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u03FF</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Georgian:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u10A0</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u10FF</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">Thai:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #569cd6;\">\\u0E00</span><span style=\"color: #d16969;\">-</span><span style=\"color: #569cd6;\">\\u0E7F</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>    <span style=\"color: #9cdcfe;\">English:</span><span style=\"color: #d16969;\"> /</span><span style=\"color: #dcdcaa;\">^</span><span style=\"color: #ce9178;\">[</span><span style=\"color: #d16969;\">a-zA-Z</span><span style=\"color: #ce9178;\">]</span><span style=\"color: #d7ba7d;\">+</span><span style=\"color: #dcdcaa;\">$</span><span style=\"color: #d16969;\">/</span>,</div>\n<div>  };</div>\n<br />\n<div>  <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">keys</span> = <span style=\"color: #9cdcfe;\">Object</span>.<span style=\"color: #dcdcaa;\">entries</span>(<span style=\"color: #9cdcfe;\">langdic</span>); <span style=\"color: #6a9955;\">// read keys and values from the dictionary</span></div>\n<div>  <span style=\"color: #569cd6;\">var</span> <span style=\"color: #9cdcfe;\">lastValue</span> = <span style=\"color: #ce9178;\">\"English\"</span>;</div>\n<div>  <span style=\"color: #9cdcfe;\">Object</span>.<span style=\"color: #dcdcaa;\">entries</span>(<span style=\"color: #9cdcfe;\">langdic</span>).<span style=\"color: #dcdcaa;\">forEach</span>(([<span style=\"color: #9cdcfe;\">key</span>, <span style=\"color: #9cdcfe;\">value</span>]) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>    <span style=\"color: #6a9955;\">// loop to read all the dictionary items if not true</span></div>\n<br />\n<div>    <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #9cdcfe;\">value</span>.<span style=\"color: #dcdcaa;\">test</span>(<span style=\"color: #9cdcfe;\">text</span>) == <span style=\"color: #569cd6;\">true</span>) {</div>\n<div>      <span style=\"color: #6a9955;\">//Check Unicode to see which one is true</span></div>\n<div>      <span style=\"color: #9cdcfe;\">lastValue</span> = <span style=\"color: #9cdcfe;\">key</span>; <span style=\"color: #6a9955;\">//print language name if unicode true</span></div>\n<div>    }</div>\n<div>  });</div>\n<div>  <span style=\"color: #c586c0;\">return</span> <span style=\"color: #9cdcfe;\">lastValue</span>;</div>\n<div>}</div>\n</div>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "10/10/2022",
      "depricate": [
        [],
        []
      ]
    },
    {
      "id": 5,
      "projectId": 5,
      "todo": [
        {
          "name": "Component 1",
          "data": [
            "<p>//use laravel db localtization, laravel localization, laravel translate</p>\n<p>https://laracasts.com/discuss/channels/laravel/how-to-use-laravel-localization-on-database-fetched-records</p>\n<p>&nbsp;</p>\n<p>// a package for translation</p>\n<p>https://github.com/spatie/laravel-translatable</p>\n<p>&nbsp;</p>\n<p>///spatie translate - recommended to use</p>\n<p>https://github.com/spatie/laravel-translatable</p>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "11/13/2022",
      "depricate": [
        []
      ]
    },
    {
      "id": 6,
      "projectId": 6,
      "todo": [
        {
          "name": "Installation",
          "data": [
            "<p><span style=\"font-size: 14px;\">install prisma: // with nuxt</span></p>\n<p><span style=\"font-size: 14px;\">install jsonwebtoken</span></p>\n<p><span style=\"font-size: 14px;\">install bcrypt</span></p>\n<p>npm i jwt-decode // import jwt_decode from \"jwt-decode\"</p>",
            "<p>Intialize prisma:</p>\n<p><span style=\"font-size: 14px;\">-&nbsp; npx prisma</span></p>\n<p><span style=\"font-size: 14px;\">- </span><span style=\"font-size: 14px;\">npx prisma init // it generates prisma&nbsp; dir and schema file</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>// this also generates .env</span></p>\n<p>- <span style=\"font-size: 14px;\">in prisma/schema.prisma</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>generator client {</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>provider = \"prisma-client-js\"</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>previewFeatures = [\"referentialIntegrity\"]</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>}</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>datasource db {</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>provider = \"sqlite\"</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>url&nbsp; &nbsp; &nbsp; = \"file:./dev.db\"</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>}</span></p>",
            "<p><span style=\"font-size: 14px;\">to make a relation betweeen 2 tables:</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>ex:</span></p>\n<p><span style=\"white-space: pre; font-size: 14px;\"> </span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>model User{</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>... same as user model before but add the relation down</span></p>\n<p><span style=\"white-space: pre; font-size: 14px;\"> </span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>refreshToken RefreshToken[] // the name of the model</span></p>\n<p><span style=\"white-space: pre; font-size: 14px;\"> </span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>}</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>model RefreshToken{</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>id String @id @default(uuid()) @map(\"uuid()\")&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>token String @unique</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>createAt DateTime @default(now())</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>updatedAt DateTime @updatedAt</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>userId String</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>user User @relation(fields: [userId], references: [id])</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>}</span></p>\n<p>&nbsp;</p>"
          ]
        },
        {
          "name": "Folder Structure must look like",
          "data": [
            "<p><span style=\"font-size: 14px;\">structure as: api/auth/login.post.js</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp;/register.post.js</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp; db/index.js</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp; db/refreshToken.js</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp; db/users.js</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp;</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp; transformers/user.js</span></p>\n<p><span style=\"font-size: 14px;\"><span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp;</span></p>\n<p><span style=\"font-size: 14px;\">&nbsp; <span style=\"white-space: pre;\"> </span>&nbsp; &nbsp; &nbsp; utils/jwt.js</span></p>"
          ]
        },
        {
          "name": "server   /api   and   /db",
          "data": [
            "<p>these two folders are related</p>\n<p>1. api is the endpoint</p>\n<p style=\"padding-left: 40px;\">ex: server/api/auth/register.post.js&nbsp;&nbsp;</p>\n<p style=\"padding-left: 80px;\">//this means it is a post request file</p>\n<p>2 db is the handler file to export final functions, create update find or ....</p>\n<p style=\"padding-left: 40px;\">ex: server/db/index.js // here is the main file to make the connection with prisma</p>\n<p style=\"padding-left: 40px;\">then:</p>\n<p style=\"padding-left: 40px;\">server/db/users.js</p>\n<p style=\"padding-left: 40px;\">can export many funcs to create and update and .....</p>\n<p>&nbsp;</p>",
            "<p>db/index.js&nbsp; &nbsp;// the main configuration file which we must import it in any other file in db:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">Prisma</span>, { <span style=\"color: #9cdcfe;\">PrismaClient</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"@prisma/client\"</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">const</span> {<span style=\"color: #4fc1ff;\">prismaClient</span>} = <span style=\"color: #9cdcfe;\">Prisma</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">prisma</span> = <span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">PrismaClient</span>();</div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span> { <span style=\"color: #4fc1ff;\">prisma</span> }</div>\n</div>",
            "<p>in any other files should look like this:: and export to the api:::: ex::</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> {<span style=\"color: #9cdcfe;\">prisma</span>} <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\".\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">bcrypt</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"bcrypt\"</span></div>\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">createUser</span> = (<span style=\"color: #9cdcfe;\">userData</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">finalUserData</span> = {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ...<span style=\"color: #9cdcfe;\">userData</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">password</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">bcrypt</span>.<span style=\"color: #dcdcaa;\">hashSync</span>(<span style=\"color: #9cdcfe;\">userData</span>.<span style=\"color: #9cdcfe;\">password</span>, <span style=\"color: #b5cea8;\">10</span>)</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4fc1ff;\">prisma</span>.<span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #dcdcaa;\">create</span>({ &nbsp; <span style=\"color: #6a9955;\">//user is the name of the model User</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">data</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">finalUserData</span></div>\n<div>&nbsp; &nbsp; })</div>\n<div>}</div>\n<br /><br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">getUserByUserName</span> = (<span style=\"color: #9cdcfe;\">username</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4fc1ff;\">prisma</span>.<span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #dcdcaa;\">findUnique</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">where</span><span style=\"color: #9cdcfe;\">:</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">username</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; })</div>\n<div>}</div>\n</div>",
            "<p>then, in api/auth/register.js&nbsp; &nbsp;// easily can be managed:</p>\n<p>&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">createUser</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/db/users\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">userTransformer</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/transformers/user\"</span>;</div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #c586c0;\">default</span> <span style=\"color: #dcdcaa;\">defineEventHandler</span>(<span style=\"color: #569cd6;\">async</span> (<span style=\"color: #9cdcfe;\">event</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">body</span> = <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">useBody</span>(<span style=\"color: #9cdcfe;\">event</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> { <span style=\"color: #4fc1ff;\">username</span>, <span style=\"color: #4fc1ff;\">email</span>, <span style=\"color: #4fc1ff;\">password</span>, <span style=\"color: #4fc1ff;\">repeatPassword</span>, <span style=\"color: #4fc1ff;\">name</span> } = <span style=\"color: #4fc1ff;\">body</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #4fc1ff;\">username</span> || !<span style=\"color: #4fc1ff;\">email</span> || !<span style=\"color: #4fc1ff;\">password</span> || !<span style=\"color: #4fc1ff;\">repeatPassword</span> || !<span style=\"color: #4fc1ff;\">name</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">sendError</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">event</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">createError</span>({ <span style=\"color: #9cdcfe;\">statusCode</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #b5cea8;\">400</span>, <span style=\"color: #9cdcfe;\">statusMessage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"Invalid Params\"</span> })</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">if</span> (<span style=\"color: #4fc1ff;\">password</span> !== <span style=\"color: #4fc1ff;\">repeatPassword</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">sendError</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">event</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">createError</span>({ <span style=\"color: #9cdcfe;\">statusCode</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #b5cea8;\">400</span>, <span style=\"color: #9cdcfe;\">statusMessage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"Password dont match\"</span> })</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">userData</span> = {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">username</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">email</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">password</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">name</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">profileImage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">'https://picsum.photos/200/200'</span></div>\n<div>&nbsp; };</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">user</span> = <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">createUser</span>(<span style=\"color: #4fc1ff;\">userData</span>); <span style=\"color: #6a9955;\">/// final function in db/users to create user</span></div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">return</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">body</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #dcdcaa;\">userTransformer</span>(<span style=\"color: #4fc1ff;\">user</span>),</div>\n<div>&nbsp; };</div>\n<div>});</div>\n</div>"
          ]
        },
        {
          "name": "Logn with prisma examole",
          "data": [
            "<p>server/db/user.js:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> {<span style=\"color: #9cdcfe;\">prisma</span>} <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\".\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">bcrypt</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"bcrypt\"</span></div>\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">createUser</span> = (<span style=\"color: #9cdcfe;\">userData</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">finalUserData</span> = {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; ...<span style=\"color: #9cdcfe;\">userData</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">password</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">bcrypt</span>.<span style=\"color: #dcdcaa;\">hashSync</span>(<span style=\"color: #9cdcfe;\">userData</span>.<span style=\"color: #9cdcfe;\">password</span>, <span style=\"color: #b5cea8;\">10</span>)</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4fc1ff;\">prisma</span>.<span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #dcdcaa;\">create</span>({ &nbsp; <span style=\"color: #6a9955;\">//user is the name of the model User</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">data</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">finalUserData</span></div>\n<div>&nbsp; &nbsp; })</div>\n<div>}</div>\n<br /><br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">getUserByUserName</span> = (<span style=\"color: #9cdcfe;\">username</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #4fc1ff;\">prisma</span>.<span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #dcdcaa;\">findUnique</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">where</span><span style=\"color: #9cdcfe;\">:</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">username</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; }</div>\n<div>&nbsp; &nbsp; })</div>\n<div>}</div>\n</div>",
            "<p>after that we need a refreshToken table: and make sure it is made in db, and has relationship with the user table:</p>\n<p>sinice we are using jwt package, we need some configuration:</p>\n<p>we need to add in the .env file :</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">JWT_ACCESS_TOKEN_SECRET</span>=<span style=\"color: #ce9178;\">\"my_super_secret_for_access_token\"</span></div>\n<div><span style=\"color: #569cd6;\">JWT_REFRESH_TOKEN_SECRET</span>=<span style=\"color: #ce9178;\">\"my_super_secret_for_refresh_token\"</span></div>\n</div>",
            "<p>then register these in runTimeConfig in nuxt.config.js:</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">runtimeConfig</span><span style=\"color: #9cdcfe;\">:</span>{</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">jwtAccessSecret</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">process</span>.<span style=\"color: #9cdcfe;\">env</span>.<span style=\"color: #4fc1ff;\">JWT_ACCESS_TOKEN_SECRET</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">jwtRefreshSecret</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">process</span>.<span style=\"color: #9cdcfe;\">env</span>.<span style=\"color: #4fc1ff;\">JWT_REFRESH_TOKEN_SECRET</span>,</div>\n<div>&nbsp; }</div>\n</div>",
            "<p>then add a new folder in server/utils/jwt.js&nbsp; &nbsp;/// to generate accessTokens and refreshTokens</p>\n<p>we need the refresh token to be stored in the db</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">jwt</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"jsonwebtoken\"</span>;</div>\n<br />\n<div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">generateAccessToken</span> = (<span style=\"color: #9cdcfe;\">user</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">config</span> = <span style=\"color: #dcdcaa;\">useRuntimeConfig</span>();</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #9cdcfe;\">jwt</span>.<span style=\"color: #dcdcaa;\">sign</span>(</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">userId</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">id</span>,</div>\n<div>&nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; <span style=\"color: #4fc1ff;\">config</span>.<span style=\"color: #9cdcfe;\">jwtAccessSecret</span>,</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">expiresIn</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"10m\"</span>,</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; );</div>\n<div>};</div>\n<br />\n<div><span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">generateRefreshToken</span> = (<span style=\"color: #9cdcfe;\">user</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">config</span> = <span style=\"color: #dcdcaa;\">useRuntimeConfig</span>();</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #9cdcfe;\">jwt</span>.<span style=\"color: #dcdcaa;\">sign</span>(</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">userId</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">id</span>,</div>\n<div>&nbsp; &nbsp; },</div>\n<div>&nbsp; &nbsp; <span style=\"color: #4fc1ff;\">config</span>.<span style=\"color: #9cdcfe;\">jwtRefreshSecret</span>,</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">expiresIn</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"4h\"</span>,</div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; );</div>\n<div>};</div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">generateToken</span> = (<span style=\"color: #9cdcfe;\">user</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">accessToken</span> = <span style=\"color: #dcdcaa;\">generateAccessToken</span>(<span style=\"color: #9cdcfe;\">user</span>);</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">refreshToken</span> = <span style=\"color: #dcdcaa;\">generateRefreshToken</span>(<span style=\"color: #9cdcfe;\">user</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">return</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">accessToken</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">accessToken</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">refreshToken</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">refreshToken</span>,</div>\n<div>&nbsp; };</div>\n<div>};</div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">sendRefreshToken</span> = (<span style=\"color: #9cdcfe;\">event</span>, <span style=\"color: #9cdcfe;\">token</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #dcdcaa;\">setCookie</span>(<span style=\"color: #9cdcfe;\">event</span>.<span style=\"color: #9cdcfe;\">res</span>, <span style=\"color: #ce9178;\">'refresh-token'</span>, <span style=\"color: #9cdcfe;\">token</span>, {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">httpOnly</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #569cd6;\">true</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">sameSite</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #569cd6;\">true</span></div>\n<div>&nbsp; &nbsp; })</div>\n<div>}</div>\n</div>",
            "<p>then in api/auth/login.post.js</p>\n<p>&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">getUserByUserName</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/db/users\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">generateToken</span>, <span style=\"color: #9cdcfe;\">sendRefreshToken</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/utils/jwt\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">userTransformer</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/transformers/user\"</span>;</div>\n<div><span style=\"color: #c586c0;\">import</span> { <span style=\"color: #9cdcfe;\">createRefreshToken</span> } <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"~~/server/db/refreshToken\"</span>;</div>\n<br />\n<div><span style=\"color: #c586c0;\">import</span> <span style=\"color: #9cdcfe;\">bcrypt</span> <span style=\"color: #c586c0;\">from</span> <span style=\"color: #ce9178;\">\"bcrypt\"</span>;</div>\n<br />\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #c586c0;\">default</span> <span style=\"color: #dcdcaa;\">eventHandler</span>(<span style=\"color: #569cd6;\">async</span> (<span style=\"color: #9cdcfe;\">event</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">body</span> = <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">useBody</span>(<span style=\"color: #9cdcfe;\">event</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> { <span style=\"color: #4fc1ff;\">username</span>, <span style=\"color: #4fc1ff;\">password</span> } = <span style=\"color: #4fc1ff;\">body</span>;</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #4fc1ff;\">username</span> || !<span style=\"color: #4fc1ff;\">password</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">sendError</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">event</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">createError</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusCode</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #b5cea8;\">400</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusMessage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"Invalid Params!!\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; })</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #6a9955;\">// Is user registerdd</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">user</span> = <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">getUserByUserName</span>(<span style=\"color: #4fc1ff;\">username</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">if</span> (!<span style=\"color: #4fc1ff;\">user</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">sendError</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">event</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">createError</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusCode</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #b5cea8;\">400</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusMessage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"This user is Invalid!!!\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; })</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<br />\n<div>&nbsp; <span style=\"color: #6a9955;\">//compare passwords</span></div>\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> <span style=\"color: #4fc1ff;\">doesPasswordMatch</span> = <span style=\"color: #c586c0;\">await</span> <span style=\"color: #9cdcfe;\">bcrypt</span>.<span style=\"color: #dcdcaa;\">compare</span>(<span style=\"color: #4fc1ff;\">password</span>, <span style=\"color: #4fc1ff;\">user</span>.<span style=\"color: #9cdcfe;\">password</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">if</span>(!<span style=\"color: #4fc1ff;\">doesPasswordMatch</span>){</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">sendError</span>(</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">event</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">createError</span>({</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusCode</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #b5cea8;\">400</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">statusMessage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #ce9178;\">\"Email or password are invalid!\"</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; })</div>\n<div>&nbsp; &nbsp; );</div>\n<div>&nbsp; }</div>\n<div>&nbsp; <span style=\"color: #6a9955;\">///generate tokens</span></div>\n<div>&nbsp; <span style=\"color: #6a9955;\">// Access Token</span></div>\n<div>&nbsp; <span style=\"color: #6a9955;\">// Refresh Token</span></div>\n<br />\n<div>&nbsp; <span style=\"color: #569cd6;\">const</span> { <span style=\"color: #4fc1ff;\">accessToken</span>, <span style=\"color: #4fc1ff;\">refreshToken</span> } = <span style=\"color: #dcdcaa;\">generateToken</span>(<span style=\"color: #4fc1ff;\">user</span>);</div>\n<br />\n<div>&nbsp; <span style=\"color: #6a9955;\">//save it inside db</span></div>\n<div>&nbsp; <span style=\"color: #c586c0;\">await</span> <span style=\"color: #dcdcaa;\">createRefreshToken</span>(</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">token</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">refreshToken</span>, <span style=\"color: #9cdcfe;\">userId</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">user</span>.<span style=\"color: #9cdcfe;\">id</span></div>\n<div>&nbsp; &nbsp; }</div>\n<div>&nbsp; );</div>\n<br />\n<div>&nbsp; <span style=\"color: #6a9955;\">//add http cookie</span></div>\n<div>&nbsp; &nbsp; <span style=\"color: #dcdcaa;\">sendRefreshToken</span>(<span style=\"color: #9cdcfe;\">event</span>, <span style=\"color: #4fc1ff;\">refreshToken</span>)</div>\n<br />\n<div>&nbsp; <span style=\"color: #c586c0;\">return</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">access_token</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #4fc1ff;\">accessToken</span>,</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">user</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #dcdcaa;\">userTransformer</span>(<span style=\"color: #4fc1ff;\">user</span>)</div>\n<div>&nbsp; };</div>\n<div>});</div>\n</div>"
          ]
        },
        {
          "name": "Transformers  like laravel resources",
          "data": [
            "<p>Transformers, we make them, to act like laravel resources, to get back only what we need from the db ex: we dont want to get back the password so,</p>\n<p>in /server/tranfromers/user.js:&nbsp; &nbsp; &nbsp;//so in the final return in the login, we dont get back all body in return, but we use ::::&nbsp; &nbsp; &nbsp;userTransformer(user)</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">export</span> <span style=\"color: #569cd6;\">const</span> <span style=\"color: #dcdcaa;\">userTransformer</span> = (<span style=\"color: #9cdcfe;\">user</span>) <span style=\"color: #569cd6;\">=&gt;</span> {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">id</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">id</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">name</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">name</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">email</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">email</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">username</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">username</span>,</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">profileImage</span><span style=\"color: #9cdcfe;\">:</span> <span style=\"color: #9cdcfe;\">user</span>.<span style=\"color: #9cdcfe;\">profileImage</span></div>\n<div>&nbsp; &nbsp; }</div>\n<div>}</div>\n</div>"
          ]
        }
      ],
      "created_at": null,
      "updated_at": "10/27/2022",
      "depricate": [
        [],
        [],
        [],
        [],
        []
      ]
    },
    {
      "id": 7,
      "projectId": 7,
      "todo": [
        {
          "name": "artisan commands and packages",
          "data": [
            "<p>1. Migrations</p>\n<p>First create Models with migrations:&nbsp;&nbsp;</p>\n<p>&nbsp; &nbsp;- sail artisan make:model Role -m</p>\n<p>&nbsp;</p>\n<p>each migration:&nbsp;</p>\n<p>$table-&gt;foreignId('user_id')-&gt;constrainec()-&gt;onDelete('cascade');&nbsp; &nbsp;</p>\n<p>if the foreignId was hard to detect by me: use foreingIdFor</p>\n<pre class=\"hljs language-php\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, 'Liberation Mono', 'Courier New', monospace; font-size: 0.888889em; margin-top: 2em; margin-bottom: 2em; background-color: #27272a; color: #e4e4e7; border-radius: 0.375rem; line-height: 1.75; padding-right: 1.5em; padding-left: 1.5em; word-spacing: 0px;\"><span class=\"hljs-variable\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; color: #ea51b2;\">$table</span>-&gt;<span class=\"hljs-title function_ invoke__\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; color: #62d6e8;\">foreignIdFor</span>(<span class=\"hljs-title class_\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; color: #00f769;\">User</span>::<span class=\"hljs-variable language_\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; color: #ea51b2;\">class</span>)-&gt;<span class=\"hljs-title function_ invoke__\" style=\"border: 0px solid #e4e4e7; box-sizing: border-box; --tw-shadow: 0 0 #0000; --tw-ring-inset: var(--tw-empty, ); --tw-ring-offset-width: 0px; --tw-ring-offset-color: #fff; --tw-ring-color: rgba(59,130,246,0.5); --tw-ring-offset-shadow: 0 0 #0000; --tw-ring-shadow: 0 0 #0000; color: #62d6e8;\">constrained</span>();<br /><br /></pre>\n<p>&nbsp;</p>",
            "<p>seeding and factories:</p>\n<p>in order to implement data by your self: ex if table role should have values like admin and user: we use seed</p>\n<ol>\n<li>sail artisan make:seed RoleSeeder</li>\n<li>then inside this file:&nbsp;</li>\n</ol>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">public</span> <span style=\"color: #569cd6;\">function</span> <span style=\"color: #dcdcaa;\">run</span>()</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #9cdcfe;\">$roles</span> = [<span style=\"color: #ce9178;\">'admin'</span>, <span style=\"color: #ce9178;\">'user'</span>];</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #dcdcaa;\">collect</span>(<span style=\"color: #9cdcfe;\">$roles</span>)-&gt;<span style=\"color: #dcdcaa;\">each</span>(<span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">$role</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Role</span>::<span style=\"color: #dcdcaa;\">create</span>([</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'name'</span> =&gt; <span style=\"color: #9cdcfe;\">$role</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; ]);</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; }</div>\n</div>\n<p style=\"padding-left: 120px;\">&nbsp;</p>\n<p style=\"padding-left: 120px;\">&nbsp;</p>\n<p>then: run this command:</p>\n<p>sail artisan db:seed&nbsp; &nbsp;/// this runs all seeder registered in DataBaseSeeder.php in the call function</p>\n<p>&nbsp;</p>\n<p>or&nbsp; to run only one seeder:</p>\n<p>sail artisan db:seed --class=RoleSeeder</p>\n<p>&nbsp;</p>\n<p>to use: sail artisan migrate:fresh --seed</p>\n<p>- we should create a seederfile: sail artisan make:seed RoleSeeder</p>\n<p>-inside DatabaseSeeder.php</p>\n<p>-inside function run()</p>\n<p>- $this-&gt;call([</p>\n<p style=\"padding-left: 80px;\">RoleSeeder::class</p>\n<p style=\"padding-left: 80px;\">]);</p>\n<p style=\"padding-left: 80px;\">&nbsp;</p>\n<p style=\"padding-left: 80px;\">&nbsp;</p>",
            "<p>Factories:</p>\n<p>to create random data for testing:</p>\n<p>sail artisan make:factory CategoryFactory</p>\n<p>then:&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #c586c0;\">return</span> [</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'name'</span> =&gt; <span style=\"color: #dcdcaa;\">fake</span>()-&gt;<span style=\"color: #dcdcaa;\">name</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'email'</span> =&gt; <span style=\"color: #dcdcaa;\">fake</span>()-&gt;<span style=\"color: #dcdcaa;\">unique</span>()-&gt;<span style=\"color: #dcdcaa;\">safeEmail</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'email_verified_at'</span> =&gt; <span style=\"color: #dcdcaa;\">now</span>(),</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'password'</span> =&gt; <span style=\"color: #ce9178;\">'$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi'</span>, <span style=\"color: #6a9955;\">// password</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #ce9178;\">'remember_token'</span> =&gt; <span style=\"color: #4ec9b0;\">Str</span>::<span style=\"color: #dcdcaa;\">random</span>(<span style=\"color: #b5cea8;\">10</span>),</div>\n<div>&nbsp; &nbsp; &nbsp; ];</div>\n</div>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">then:</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p>to run this factory, can&nbsp; be done by many methods:</p>\n<p>1. tinker:</p>\n<p>sail artisan tinker</p>\n<p>then:</p>\n<p>App\\Models\\User::factory()-&gt;count(3)-&gt;create();</p>\n<p>check documentations for more infos</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>",
            "<p>to create an api resource controller for a model with requests:</p>\n<p>sail artisan make:controller AuthController --model=User --api -R</p>\n<p>or the same</p>\n<p>sail artisan make:controller AuthController --model=User --api --requests</p>",
            "<p><span style=\"background-color: #e03e2d; color: #ffffff;\"><strong><span style=\"font-size: 18pt; background-color: #e03e2d;\">email verification:</span></strong></span></p>\n<p><span style=\"font-size: 12pt;\">while registering:</span></p>\n<p><span style=\"font-size: 12pt;\">- we should add ---&gt;&gt;&gt;&gt; implements MustVerifyEmail</span></p>\n<p><span style=\"font-size: 12pt;\">- then in the controller for the register after create($user); we should add this:</span></p>\n<p><span style=\"font-size: 12pt;\">- event(new Registered($user));</span></p>\n<p><span style=\"font-size: 12pt;\">- then in AuthServiceProvider: add:</span></p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #dcdcaa;\">registerPolicies</span>();</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">VerifyEmail</span>::<span style=\"color: #dcdcaa;\">toMailUsing</span>(<span style=\"color: #569cd6;\">function</span> (<span style=\"color: #9cdcfe;\">$notifiable</span>, <span style=\"color: #9cdcfe;\">$url</span>) {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> (<span style=\"color: #569cd6;\">new</span> <span style=\"color: #4ec9b0;\">MailMessage</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">subject</span>(<span style=\"color: #ce9178;\">'Verify Email Address'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">line</span>(<span style=\"color: #ce9178;\">'Click the button below to verify your email address.'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">action</span>(<span style=\"color: #ce9178;\">'Verify Email Address'</span>, <span style=\"color: #9cdcfe;\">$url</span>);</div>\n<div>&nbsp; &nbsp; &nbsp; });</div>\n</div>\n<p>&nbsp;</p>\n<p><span style=\"font-size: 12pt;\">- then configure the smtp in .env&nbsp; &nbsp;===&gt; mailtrap or smtp</span></p>\n<p><span style=\"font-size: 12pt;\">- publish the vendor for email template to style it on my own:</span></p>\n<p style=\"padding-left: 40px;\"><span style=\"font-size: 12pt;\"><span style=\"font-size: 16px;\">sail artisan vendor:publish --tag=laravel-notifications</span></span></p>\n<p><span style=\"font-size: 12pt;\"><span style=\"font-size: 16px;\">- this creates a /resources/views/vendor/notfication.blade.php</span></span></p>\n<p><span style=\"font-size: 12pt;\"><span style=\"font-size: 16px;\">- play with it</span></span></p>\n<p>&nbsp;</p>\n<p><span style=\"color: #ecf0f1; background-color: #e03e2d;\">This will not work until we add the routes:::::</span></p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div><span style=\"color: #4ec9b0;\">Route</span>::<span style=\"color: #dcdcaa;\">get</span>(<span style=\"color: #ce9178;\">'/email/verify/{id}/{hash}'</span>, <span style=\"color: #569cd6;\">function</span> (<span style=\"color: #4ec9b0;\">EmailVerificationRequest</span> <span style=\"color: #9cdcfe;\">$request</span>) {</div>\n<div>&nbsp; &nbsp; <span style=\"color: #9cdcfe;\">$request</span>-&gt;<span style=\"color: #dcdcaa;\">fulfill</span>();</div>\n<br />\n<div>&nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #dcdcaa;\">response</span>(<span style=\"color: #ce9178;\">'verified'</span>);</div>\n<div>})-&gt;<span style=\"color: #dcdcaa;\">middleware</span>([<span style=\"color: #ce9178;\">'auth:sanctum'</span>, <span style=\"color: #ce9178;\">'signed'</span>])-&gt;<span style=\"color: #dcdcaa;\">name</span>(<span style=\"color: #ce9178;\">'verification.verify'</span>);</div>\n</div>\n<p>&nbsp;</p>\n<p>&nbsp;</p>\n<p>&nbsp;</p>",
            "<p>Resend email verification:</p>\n<pre class=\"lang-php s-code-block\" style=\"margin-top: 0px; margin-bottom: 0px; padding: var(--su12); border: 0px; font-variant-numeric: inherit; font-variant-east-asian: inherit; font-stretch: inherit; line-height: var(--lh-md); font-family: var(--ff-mono); font-size: var(--fs-body1); vertical-align: baseline; box-sizing: inherit; width: auto; max-height: 600px; overflow: auto; border-radius: var(--br-md); color: var(--highlight-color); overflow-wrap: normal;\"><code class=\"hljs language-php\" style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: var(--fs-body1); vertical-align: baseline; box-sizing: inherit; white-space: inherit;\"><span class=\"hljs-variable\" style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-variable);\">$user</span>-&gt;<span class=\"hljs-title function_ invoke__\" style=\"margin: 0px; padding: 0px; border: 0px; font-style: inherit; font-variant: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; font-family: inherit; font-size: 13px; vertical-align: baseline; box-sizing: inherit; color: var(--highlight-literal);\">sendEmailVerificationNotification</span>();</code></pre>",
            "<p>Relation ship hint:</p>\n<p>in the name of the functions: take&nbsp; care for the naming if plural or singular:</p>\n<p>&nbsp;</p>\n<p>- user and roles relation:</p>\n<p>- Roles can have many users&nbsp; &nbsp; &nbsp;----&nbsp; &nbsp; while user can have one role</p>\n<p>- relation one to many:::</p>\n<p style=\"padding-left: 40px;\">- in User.php&nbsp; &nbsp;//Model&nbsp; //make sure role and not role(s)</p>\n<p style=\"padding-left: 80px;\">public function role(){ return $this-&gt;belongsTo(Role::class);}</p>\n<p style=\"padding-left: 40px;\">in Role.php&nbsp; &nbsp;//model</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div style=\"padding-left: 40px;\"><span style=\"color: #569cd6;\"> public</span> <span style=\"color: #569cd6;\">function</span> <span style=\"color: #dcdcaa;\">users</span>()</div>\n<div style=\"padding-left: 80px;\">&nbsp; &nbsp; {</div>\n<div style=\"padding-left: 80px;\">&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #c586c0;\">return</span> <span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #dcdcaa;\">hasMany</span>(<span style=\"color: #4ec9b0;\">User</span>::<span style=\"color: #569cd6;\">class</span>);</div>\n<div style=\"padding-left: 80px;\">&nbsp; }</div>\n</div>",
            "<p><span style=\"background-color: #e03e2d; color: #ffffff; font-size: 24pt;\">Api Resources: hints</span></p>\n<p>Resource and resourceCollection</p>\n<p>Command: sail artisan make:resource UserResource</p>\n<p>resource: if on elemnt we get we use resource: ex:</p>\n<p style=\"padding-left: 40px;\">$user = User::find(id: 1);&nbsp; &nbsp; ||| or |||&nbsp; &nbsp;$user = User::where('id', '1')-&gt;where('name', 'abc')-&gt;first();</p>\n<p style=\"padding-left: 40px;\">return new UserResource($user);</p>\n<p>orr::&nbsp; &nbsp;&nbsp;</p>\n<p><span style=\"background-color: #e03e2d; color: #ffffff;\">UserResource::collection($users);&nbsp;</span></p>\n<p>if we have an elquent collection returned: ex: $users = User::all();</p>\n<p>then we use: UserResource::collection($users);</p>\n<p>&nbsp;</p>\n<p>if we want to make custom collection:::</p>\n<p>we use sail artisan make:resource UserCollection</p>\n<p>or</p>\n<p style=\"padding-left: 200px;\">UserResource --collection</p>\n<p style=\"padding-left: 200px;\">check documentation</p>"
          ]
        },
        {
          "name": "versioning",
          "data": [
            "<p>the main thing to look is into the prefix, in the RouteServiceProvider.php</p>\n<div style=\"color: #d4d4d4; background-color: #1e1e1e; font-family: Consolas, 'Courier New', monospace; line-height: 19px; white-space: pre;\">\n<div>&nbsp;<span style=\"color: #569cd6;\">public</span> <span style=\"color: #569cd6;\">function</span> <span style=\"color: #dcdcaa;\">boot</span>()</div>\n<div>&nbsp; &nbsp; {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #dcdcaa;\">configureRateLimiting</span>();</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #dcdcaa;\">routes</span>(<span style=\"color: #569cd6;\">function</span> () {</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Route</span>::<span style=\"color: #dcdcaa;\">middleware</span>([<span style=\"color: #ce9178;\">'api'</span>, <span style=\"color: #ce9178;\">'api_version:v1'</span>]) &nbsp;<span style=\"color: #6a9955;\">//middleware: &nbsp;APIVersion, registered in kernel.php as api_version, and accepts parameter :v1, :v2, :123 ...</span></div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">prefix</span>(<span style=\"color: #ce9178;\">'api/v1'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">namespace</span>(<span style=\"color: #ce9178;\">\"{</span><span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #9cdcfe;\">apiNamespace</span><span style=\"color: #ce9178;\">}\\V1}\"</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">group</span>(<span style=\"color: #dcdcaa;\">base_path</span>(<span style=\"color: #ce9178;\">'routes/api_v1.php'</span>));</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Route</span>::<span style=\"color: #dcdcaa;\">middleware</span>([<span style=\"color: #ce9178;\">'api'</span>, <span style=\"color: #ce9178;\">'api_version:v2'</span>])</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">prefix</span>(<span style=\"color: #ce9178;\">'api/v2'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">namespace</span>(<span style=\"color: #ce9178;\">\"{</span><span style=\"color: #569cd6;\">$this</span>-&gt;<span style=\"color: #9cdcfe;\">apiNamespace</span><span style=\"color: #ce9178;\">}\\V2}\"</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">group</span>(<span style=\"color: #dcdcaa;\">base_path</span>(<span style=\"color: #ce9178;\">'routes/api_v2.php'</span>));</div>\n<br />\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; <span style=\"color: #4ec9b0;\">Route</span>::<span style=\"color: #dcdcaa;\">middleware</span>(<span style=\"color: #ce9178;\">'web'</span>)</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -&gt;<span style=\"color: #dcdcaa;\">group</span>(<span style=\"color: #dcdcaa;\">base_path</span>(<span style=\"color: #ce9178;\">'routes/web.php'</span>));</div>\n<div>&nbsp; &nbsp; &nbsp; &nbsp; });</div>\n<div>&nbsp; }</div>\n</div>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">&nbsp;</p>\n<p style=\"padding-left: 40px;\">so, the prefix it will lead us, to choose the file api_v1.php</p>\n<p style=\"padding-left: 40px;\">then, the other configuration,, good to make them, like middleware and set the version in the app and other, check down,&nbsp;</p>\n<p style=\"padding-left: 40px;\">but the main thing is the prefix</p>",
            "<p><span style=\"color: #292929; font-family: source-code-pro, Menlo, Monaco, 'Courier New', Courier, monospace; font-size: 15px; letter-spacing: -0.06px; background-color: #f2f2f2;\">php artisan make:controller Api/V1/MyController</span></p>\n<p><span style=\"color: #292929; font-family: source-code-pro, Menlo, Monaco, 'Courier New', Courier, monospace; font-size: 15px; letter-spacing: -0.06px; background-color: #f2f2f2;\">php artisan make:resource V1/UserResource</span></p>",
            "<p>config/app.php</p>\n<p>return [</p>\n<p><span class=\"un jf\" style=\"box-sizing: inherit; font-weight: bold; font-family: source-code-pro, Menlo, Monaco, 'Courier New', Courier, monospace; color: #292929; font-size: 16px; letter-spacing: -0.352px; white-space: pre-wrap; background-color: #f2f2f2;\">'api_latest' =&gt; '2',</span></p>\n<p>]</p>\n<p>&nbsp;</p>\n<p>then, if return response(config('app.api.version');&nbsp; /// it will print the v1 or v2 or v3 depends on what we specify</p>",
            "<p><span style=\"color: #292929; font-family: source-code-pro, Menlo, Monaco, 'Courier New', Courier, monospace; font-size: 16px; letter-spacing: -0.352px; white-space: pre-wrap; background-color: #f2f2f2;\">php artisan make:middleware APIVersion: check down related in details:</span><span id=\"5165\" class=\"ga ll lm je un b dm uo up l uq ur\" style=\"box-sizing: inherit; display: block; font-size: 16px; color: #292929; line-height: 1.18; letter-spacing: -0.022em; margin-top: -0.09em; margin-bottom: -0.09em; white-space: pre-wrap; min-width: fit-content;\" data-selectable-paragraph=\"\"></span></p>\n<p>&nbsp;</p>\n<p>change the handle function to be :</p>\n<p>Note: http://localhost/api/v1/login</p>\n<p>then set the guard api/v1 to the app.api.version</p>\n<p>app.api.version = 'v1'</p>\n<p>&nbsp;</p>\n<p>&nbsp; &nbsp; public function handle($request, Closure $next, $guard) //$guard is the version number</p>\n<p>&nbsp; &nbsp; {</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; config(['app.api.version' =&gt; $guard]);</p>\n<p>&nbsp; &nbsp; &nbsp; &nbsp; return $next($request);</p>\n<p>&nbsp; &nbsp; }</p>",
            "<p>in addition:</p>\n<ol>\n<li>the middleware is expection version number as $guard :\n<ol>\n<li>handle($request, Closure $next, $guard){</li>\n<li>then: assign this guard to the config(['app.api.version' =&gt; $guard];</li>\n</ol>\n</li>\n<li>the url: http://localhost/api/v1/ ......\n<ol>\n<li>the first thing is when we visit this api it will enter routeServiceProvider&nbsp;</li>\n<li>checks for the boot(){\n<ol>\n<li>$this-&gt;routes(function(){\n<ol>\n<li><span style=\"background-color: #e03e2d; color: #ecf0f1;\">Route::middleware([api, api_version:v1]&nbsp; //this is the $guard in the middleware</span></li>\n<li><span style=\"background-color: #3598db; color: #ecf0f1;\">prefix('api/v1') ////// this is the link api/v1</span></li>\n<li><span style=\"background-color: #3598db; color: #ecf0f1;\">t<span style=\"background-color: #000000;\">hen specify the namespace&nbsp;</span></span></li>\n<li><span style=\"background-color: #3598db; color: #ecf0f1;\"><span style=\"background-color: #000000;\">and give the pathway for the route file: routes/api_v1.php</span></span></li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><span style=\"color: #000000;\">then, now in api_v1&nbsp; ==&gt; every thing is registered, the middleware api and api_version:v1, so no need to prefix and group them</span></li>\n<li><span style=\"color: #000000;\">in RouteServicePorvider.php ==&gt; add this protected $apiNamespace = 'App\\Http\\Controllers\\Api';</span></li>\n<li><span style=\"color: #000000;\">note:::</span></li>\n<li><span style=\"color: #000000;\">note::&nbsp; dont forget to register the middleware and give iname:&nbsp;</span>api_version\n<ol>\n<li>in kernel.php in $routeMiddleware = []</li>\n</ol>\n</li>\n<li>&nbsp;</li>\n</ol>",
            "<p>CHECK thiiiiiisssss</p>\n<p>&nbsp;</p>\n<p>https://medium.com/mestredev/versioning-your-rest-api-with-laravel-646bcc1f70a4</p>"
          ]
        },
        {
          "name": "Translation",
          "data": [
            "<pre style=\"box-sizing: border-box; font-family: ui-monospace, SFMono-Regular, 'SF Mono', Menlo, Consolas, 'Liberation Mono', monospace; font-size: 13.6px; margin-top: 0px; margin-bottom: 0px; overflow-wrap: normal; padding: 16px; overflow: auto; line-height: 1.45; border-radius: 6px; word-break: normal; color: #24292f;\">composer require astrotomic/laravel-translatable<br /><br /></pre>"
          ]
        },
        {
          "name": "Visits",
          "data": []
        }
      ],
      "created_at": null,
      "updated_at": "11/21/2022",
      "depricate": [
        [],
        [],
        [],
        []
      ]
    }
  ]
}